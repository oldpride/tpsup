#!/usr/bin/env python
import argparse
import os

from tpsup.batch import  parse_cfg, run_batch
from tpsup.exectools import exec_into_globals
from pprint import pformat

import sys

args = sys.argv[1:]

prog = 'tpbatch.py'

usage_str = ''

usage_template = '''
   {usage_caller} key1=value1  key2=value2 ...
   {usage_caller} suit=suit1   key1=value1 ...

   {usage_caller} -batch fille key1=value1 ...

   {usage_caller} ANY

   {detail}
   -v              verbose mode. each -v will increment level. max level is 2.

   -batch file     file has command args, one line per call.
                   if file is '-', it means STDIN

    -dryrun        dryrun mode if implemented

    -interactive   interactive mode if implemented

   'pos_arg' is required and defined in file.cfg


   If value is '-', it will take from STDIN. click 'Enter' then 'Control+D' to end.
   Only one '-' is allowed.

   'suit' is a set of pre-defined keys; can be overwriten by command-line key=value.

   the code flow is:
      linked_script -> tpbatch -> TPSUP::BATCH ->    xxx.cfg file   -> module
   eg.
      tpslnm_test   -> tpbatch -> TPSUP::BATCH ->   tpslnm_test.cfg -> TPSUP::SELENIUM
    tpswagger_test  -> tpbatch -> TPSUP::BATCH ->tpswagger_test.cfg -> TPSUP::SWAGGER
      tpbatch_test  -> tpbatch -> TPSUP::BATCH ->  tpbatch_test.cfg -> TPSUP::BATCH


'''

prog = os.path.basename(__file__)

def exec_simple(source):
    return exec_into_globals(source, globals(), locals())

def get_usage_str(usage_caller: str, detail: str):
    exec_into_globals(f"usage_str=f'''{usage_template}'''", globals(), locals())
    return usage_str

def usage(usage_caller: str, detail: str, errMsg: str):
    print(f'ERROR: {errMsg}')
    # exec_simple(f"usage_str=f'''{usage_template}'''")
    get_usage_str(usage_caller, detail)
    print(usage_str)
    exit(1)

if len(args) == 0:
    usage(usage_caller=prog, detail='', errMsg="missing args")

verbose = 0

if args[0] == '-v':
    verbose = verbose +1
    args = args[1:] # shift
    if len(args) == 0:
        usage(usage_caller=prog, detail='', errMsg="missing args")

all_cfg = parse_cfg(args[0])
if verbose:
    print(f'all_cfg = {pformat(all_cfg)}')

args = args[1:] # shift

parser = argparse.ArgumentParser(
    prog=sys.argv[0],
    #epilog=examples,
    description=get_usage_str(usage_caller=prog, detail=''),
    # formatter_class=argparse.RawTextHelpFormatter, # this honors \n but messed up indents
    formatter_class=argparse.RawDescriptionHelpFormatter
)

parser.add_argument(
    '-c', '--caller', action='store', default=None,
    help="caller name")

parser.add_argument(
    '-v', '--verbose', default=verbose, action="count",
    help='verbose level: -v, -vv, -vvv')

parser.add_argument(
    '-dryrun', '--dryrun', default=False, action="store_true",
    help='dryrun mode')

parser.add_argument(
    '-interactive', '--interactive', default=False, action="store_true",
    help='interactive mode')

parser.add_argument(
    '-b', '--batch', action='store', default=None,
    help="batch file")

parser.add_argument(
    # args=argparse.REMAINDER indicates optional remaining args and stored in a List
    'remainingArgs', nargs=argparse.REMAINDER,
    help='remaining args. Can be mod_file if -modOnly set, or default to args to the preceding mod_file, start with --')

extra_args = all_cfg.get('extra_args', [])

for argument_dict in extra_args:
    parser.add_argument(f'-{argument_dict["dest"]}', **argument_dict)


a = vars(parser.parse_args(args))
# as of python 3.10, 2022/04/10, parse_intermixed_args() cannot handle nargs
# a = vars(parser.parse_intermixed_args(args))

verbose = a['verbose']
if verbose:
    print(f"a = {pformat(a)}")

position_args = all_cfg.get('position_args', [])
remainingArgs = a['remainingArgs']

opt = {}

caller = a['caller']
if (len(position_args) > len(remainingArgs)):
    usage(usage_caller=caller, detail='', errMsg=f'missing positional args, expecting {len(position_args)}, '
                                                 f'actual {len(remainingArgs)}')
for pa in position_args:
    opt[pa] = remainingArgs[0]
    remainingArgs = remainingArgs[1:] # shift

minimal_args = all_cfg.get('minimal_args', 1)

batch = a['batch']
if len(remainingArgs) < minimal_args and batch is None:
    usage(usage_caller=caller, detail='', errMsg=f'missing args, expecting {minimal_args}, '
                                                 f'actual {len(remainingArgs)}')
print(f'opt={pformat(opt)}')
print(f'remainingArgs={remainingArgs}')

if batch is not None:
    run_batch(all_cfg, batch, **opt)
else:
    run_batch(all_cfg, [remainingArgs], **opt)