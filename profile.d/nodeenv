# for vs code
local usage prog BIN_DIRS NPM_DIRS DIR

prog=${FUNCNAME[1]}

usage="
usage:

   $prog check
   $prog set

"

if [ $# -ne 1 ]; then
   echo "$prog: wrong number of args"
   echo "$usage"
   return
fi

action=$1

# npm installation folder when running
#    $ npm install --global yarn
# files go to
#       %USERPROFILE%\AppData\Roaming\npm\node_modules\yarn\bin\yarn.exe
#    C:\Users\william\AppData\Roaming\npm\node_modules\yarn\bin\yarn.exe
# tpsup/profile set WINHOME %USERPROFILE%
#
#  yarn installation path - %LOCALAPPDATA%\yarn\bin
#     yarn info ganache-cli
#  files goes to
#     C:\Users\william\AppData\Local\Yarn\bin

if [[ $UNAME =~ CYGWIN ]]; then
   BIN_DIRS="/cygdrive/c/Program Files/nodejs:$WINHOME/AppData/Roaming/npm/node_modules/yarn/bin:$WINHOME/AppData/Local/Yarn/bin"
   NPM_DIRS="/cygdrive/c/Program Files/nodejs"
elif [[ $UNAME =~ MINGW64_NT ]]; then
   BIN_DIRS="/c/Program Files/nodejs:$WINHOME/AppData/Roaming/npm/node_modules/yarn/bin:$WINHOME/AppData/Local/Yarn/bin"
   NPM_DIRS="/c/Program Files/nodejs"
elif [[ $UNAME =~ Linux ]]; then
   BIN_DIRS=/snap/bin
   NPM_DIRS="/usr/local/lib/node_modules"
elif [[ $UNAME =~ Darwin ]]; then
   BIN_DIRS="/usr/local/bin"
   NPM_DIRS="/usr/local/lib/node_modules"
else
   echo "unsupported UNAME='$UNAME'"
   return
fi

if [ $action = check ]; then
   echo ""
   echo "current installations: "
   #split DIRS by :
   echo "$BIN_DIRS" | tr ":" "\n" | while read DIR; do
      # $DIR may contain space, so we need to quote it
      ls -ld "$DIR"
   done

   echo ""
   echo "npm global (-g) installations: "
   echo "$NPM_DIRS" | tr ":" "\n" | while read DIR; do
      ls -ld "$DIR"
   done

   echo ""
   echo "check if commands are in PATH"
   for cmd in node npm yarn npx; do
      which $cmd || echo "  $cmd not found"
   done
elif [ $action = set ]; then
   export PATH="$PATH:node_modules/.bin:$BIN_DIRS"

   # node_modules/.bin is for local npm installations
   # see https://docs.npmjs.com/cli/v10/using-npm/scripts
   # If you depend on modules that define executable scripts, like test suites,
   # then those executables will be added to the PATH for executing the scripts.
   # So, if your package.json has this:
   # {
   #   "name": "foo",
   #   "dependencies": {
   #     "bar": "0.1.x"
   #   },
   #   "scripts": {
   #     "start": "bar ./test"
   #   }
   # }
   # then you could run npm start to execute the bar script, which is exported
   #  into the node_modules/.bin directory on npm install.

   reduce PATH

   if [ -n "$NPM_DIRS" ]; then
      export NODE_PATH="$NPM_DIRS:$NODE_PATH"
      reduce NODE_PATH
   else
      echo "$prog: NODE_DIRS is not set for $UNAME"
   fi
else
   echo "$prog: unknown action=$action"
   echo "$usage"
   return
fi

mynpm() {
   if [[ $UNAME =~ Cygwin ]]; then
      cd "$WINHOME/AppData/Roaming/npm/node_modules"
   elif [[ $UNAME =~ Msys ]]; then
      cd "$WINHOME/AppData/Roaming/npm/node_modules"
   elif [[ $UNAME =~ Darwin ]]; then
      cd "/usr/local/lib/node_modules"
   else
      echo "$prog: unknown uname=$UNAME"
   fi
}
