#! /usr/bin/perl

use strict;
use Data::Dumper;
use Carp;
use Getopt::Long;
use TPSUP::UTIL qw(get_exps_from_string get_out_fh);
use TPSUP::FIX qw(diff_fix map_desc_by_tag_value);

my $prog = $0; $prog =~ s:.*/::;
my $dir = $0; $dir =~ s:[^/]+$::;

my $min_idle = 60;
my $fdelimiter = ",";

sub usage {
   my ($msg) = @_;

   print STDERR "$msg\n" if $msg;

   print STDERR << "EOF";
usage:

   $prog fix1.log fix2.log

description:
   diff two fix message logs

   -ref      ref_tags      tags used to link (like foreign key) fix messages
                           default to 11,35,39

   -xp exclude_pattern     Perl style, exclude lines with this pattern.
                           Can use multiple times (AND logic).

   -mp match_pattern       Perl style, exclude lines without this pattern.
                           Can use multiple times (AND logic).

   -xe exclude_expression  Perl style, eg, -xe '\$35=~/[DGF]', can use multiple times.
                           Can use multiple times (AND logic).

   -me match_expression    Perl style, eg, -me '\$35=~/[DGF]', can use multiple times.
                           Can use multiple times (AND logic).

   -o output.csv           default to STDOUT

   -delimiter char         input delimiter, default to auto detect

   -maxmatch number        match up to this many lines      from      each file

   -t tag1,tag2,...        only compare these tags
   
   -delete tag1,tag2,...
                           delete these tags in output, useful when you want all tags
                           except tag1,tag2,.... (when -fields not specified)

   -option setting         other options, eg,

NOTE:
   -mp/-xp are not as accurate as -me/-xe, but they are faster and are good pre-filters.
   Using -mp/-xp and -me/-xe together will be faster then using -me/-xe alone.

   this script cannot handle nested fix messages: eg.
      New List:      35=E, 66=ListID
      New Multileg: 35=AB, 654=LegID

examples:

   $prog      difffix_test1.txt difffix_test2.txt | less -S

   - compare the 1st message only
   $prog -maxmatch 1 difffix_test1.txt difffix_test2.txt

   - use match pattern
   $prog -me '\${55} eq "TGLS"'      difffix_test1.txt difffix_test2.txt

   - only compare these tags' diference
   $prog -tags 41,60,6666,6667      difffix_test1.txt difffix_test2.txt

   - ignore some tags' diference
   $prog -delete 41,60,6666,6667 difffix_test1.txt difffix_test2.txt

EOF

   exit 1;
}

my @exclude_pattern;
my @match_pattern;
my $verbose;
my @match_expression;
my @exclude_expression;
my @ExportExps;
my $output = '-';
my $front_tags;
my $FixDictFile;
my $maxmatch;
my $delimiter;
my $odelimiter;
my $nested;
my $delete_tags;
my @other_options;
my @ref_keystring;
my $tagString;

GetOptions(
   "xp=s" => \@exclude_pattern,
   "mp=s" => \@match_pattern,
   "me=s" => \@match_expression,
   "xe=s" => \@exclude_expression,
   "ee=s" => \@ExportExps,
   "v"      =>      \$verbose,
   "o=s"      =>      \$output,
   "delimiter=s" => \$delimiter,
   "front=s"      =>      \$front_tags,
   "dict=s"      =>      \$FixDictFile,
   "maxmatch=s" => \$maxmatch,
   'delete=s' => \$delete_tags,
   'op|option=s' => \@other_options,
   't|tags=s' => \$tagString,
) or usage("Could not parse command line: $!");

usage("wrong number of args") if @ARGV < 2;

my @files = @ARGV;

my $FixDict;

if ($FixDictFile) {
   croak "$FixDictFile not found" if ! -f $FixDictFile;

   $FixDict = `cat $FixDictFile`;

   # load the user-specified dict here because filter_fix may not take $opt when
   # applying TPSUP::Expression
   map_desc_by_tag_value({FixDict => $FixDict});
}

my @RefMatrix;

if (@ref_keystring) {
   for my $string (@ref_keystring) {
      my @keys = split /,/, $string;
      push @RefMatrix, \@keys;
   }

   if (@RefMatrix < @files) {
      for (my $i=@RefMatrix; $i<@files; $i++) {
         push @RefMatrix, @RefMatrix[0];
      }
   }
} else {
   for (my $i=0; $i<@files; $i++) {
      push @RefMatrix, [ 11, 35, 39];
   }
}

my $opt = {
   MatchExps         => \@match_expression,
   ExcludeExps       => \@exclude_expression,
   MatchPatterns     => \@match_pattern,
   ExcludePatterns   => \@exclude_pattern,
   FixDelimiter      => $delimiter,
   DiffFixOutput     => $output,
   verbose           => $verbose,
   ExportExps        => \@ExportExps,
   FilterFixMaxMatch => $maxmatch,
   SelectTags        => $tagString,
};

if ($delete_tags) {
   @{$opt->{DeleteColumns}} = split /,/, $delete_tags;
}

for my $op (@other_options) {
   if ($op =~ /^(.+?)=(.+)/) {
      my ($k, $v) = ($1, $2);

      if ($k =~ /^(DQuoteColumns|InGroupSortKeys|GroupKeys|DeleteColumns)$/) {
         @{$opt->{$k}} = split /,/, $v;
      } else {
         $opt->{$k} = $v;
      }
   } else {
      $opt->{$op} = 1;
   }
}

$verbose && print "opt=", Dumper($opt);

diff_fix([@files], \@RefMatrix, $opt);

exit 0;
