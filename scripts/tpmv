#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use Carp;

my $prog = $0; $prog =~ s:.*/::;
my $default_maxdepth = 100;

sub usage {
   my ($message) = @_;

   print "$message\n" if $message;

   print STDERR << "END";
usage:

   $prog old_pattern new_string path1 path2 ...

   $prog -s sed_clause path1 path2 ...

   massively change file names using pattern

   'sed_clause'    eg, s/old_pattern/new_pattern/g

   'path1 path2 ...'
                   can be both file and directory

   -m pattern      only files with name matching this pattern

   -x pattern      exclue files with name to matching this pattern

   -i              case-insensitive when handling '-x' and '-m'.
                   default to case-sensitive.

   -f              force mode. execute change without asking for confirmation

   -r              recursive

   -v              verbose mode

   -n              dry run. just list the changes without making the changes

   -s              the next arg is a sed/perl substitution, eg s/old_pattern/new_pattern/ig.
                   the default is a global replacement, ie, 'g' is added to the end of the pattern.
                   if just want to change 1 place, use this option without 'g', eg, 
                     $prog -s 's/old_pattern/new_pattern/' path1 path2 ...

   -y              when prompt, simple return means 'Y'. default to 'N';


   -maxdepth MAXDEPTH 
                   max depth of dir. default to $default_maxdepth

example:

   - change fix.4.4.py ... to fix_4_4.py
   $prog -x fix.py  [.]   _ fix.*py
   $prog            _py .py fix*_py

   - the following commands are the same
   $prog uat prod          uat.txt uatdir
   $prog -s "s/uat/prod/g" uat.txt uatdir

   - when patten contains '/', use a. different separator, eg,
   $prog -s "s:/apps/data/:/apps/archive:/g" apps.txt appsdir

   - only change *.properties files under current dir recursively
   $prog -m .properties old_string new_string .

   - use a capture group
   $prog      '(..)_CallPython' 'CallPython_\$1' *
   $prog -s 's/(..)_CallPython/CallPython_\$1/'  *

END

   exit 1;
}

my $verbose;

my @paths;
my $perl_substitution;
my $force;
my $default_yes;
my $maxdepth;
my $insensitive;
my $MatchPattern;
my $ExcludePattern;
my $dryrun;
my $recursive;

GetOptions(
   'v|verbose'  =>  \$verbose,
   'f'          =>  \$force,
   'n'          =>  \$dryrun,
   'y'          =>  \$default_yes,
   'r'          =>  \$recursive,
   's=s'        =>  \$perl_substitution,
   'i'          =>  \$insensitive,
   'm=s'        =>  \$MatchPattern,
   'x=s'        =>  \$ExcludePattern,
   'maxdepth=s' =>  \$maxdepth,
) || usage ("cannot parse command line: $!");

my $substitution;

if ($perl_substitution) {
   $substitution = $perl_substitution;
   usage("wrong number of args") if !@ARGV;
} else {
   usage("wrong number of args") if @ARGV < 3;
   my $old = shift @ARGV;
   my $new = shift @ARGV;

   $substitution = "s!$old!$new!g";
}

my $warn = $verbose ? "use" : "no";
my $compiled = eval "$warn warnings; no strict; sub { my (\$path)=\@_; \$path =~ $substitution; return \$path }";
die "failed to compile '$substitution'" if $@;

my $opt = {
   RecursiveMax => $maxdepth,
   compiled     => $compiled,
   force        => $force,
};

$opt->{DefaultAnswer} = $default_yes ? "Y" : "N";

if ($MatchPattern) {
   if ($insensitive) {
      $opt->{MatchPattern} = qr/$MatchPattern/i;
   } else {
      $opt->{MatchPattern} = qr/$MatchPattern/;
   }
}

if ($ExcludePattern) {
   if ($insensitive) {
      $opt->{ExcludePattern} = qr/$ExcludePattern/i;
   } else {
      $opt->{ExcludePattern} = qr/$ExcludePattern/;
   }
}

my $error;

for my $path (@ARGV) {
   if (! -e $path) {
      print "$path not found\n";
      $error ++;
      next;
   }

   my $res = move_file($path, $path, $opt);
   $error += $res->{error};

   if ($recursive) {
      my $ref = recursive_path($res->{new_path}, 1, $opt);
      $error += $ref->{error};
   }
}

if ($error) {
   print "Total $error errors.\n";
}

exit $error;

################################################################

sub recursive_path {
   my ($path, $level, $opt) = @_;

   my $ret;
   $ret->{error} = 0;

   if (! -e $path) {
      return $ret;
   }

   if (-d $path) {
      # this is a dir

      $level ++;

      my $max_level = defined $opt->{RecursiveMax} ? $opt->{RecursiveMax} : $default_maxdepth;

      if ($level > $max_level) {
         if (defined $opt->{RecursiveMax}) {
            # this is user-defined limit - it is intentional, so return without complain
            return $ret;
         } else {
            # this is safety catch
            croak "recursive level($level) > max_level($max_level), path=$path";
         }
      }

      my $dfh;
      opendir($dfh, $path);

      if (!$dfh) {
         print STDERR "cannot open dir $path\n";
         $ret->{error} ++;
      } else {
         my @files_in_dir = readdir($dfh);

         for my $f (sort @files_in_dir) {
            next if $f eq '.' || $f eq '..';

            my $res = move_file($f, "$path/$f", $opt);

            $ret->{error} += $res->{error};
            
            my $ref = recursive_path("$path/$res->{new_path}", $level, $opt);

            $ret->{error} += $ref->{error};
         }
      }
   } 

   return $ret;
}

sub move_file {
   my ($path, $full_path, $opt) = @_;

   my $new_path;
   if ($opt->{MatchPattern} && $full_path !~ /$opt->{MatchPattern}/) {
      # keep the old path, ie, no change
      $new_path = $path;
   } elsif ($opt->{ExcludePattern} && $full_path =~ /$opt->{ExcludePattern}/) {
      # keep the old path, ie, no change
      $new_path = $path;
   } else {
      $new_path = $opt->{compiled}->($path);
   }

   my $res = {
      new_path => $new_path,
      error    => 0,
   };

   if ($new_path eq $path) {
      # if no change, we return
      return $res;
   }

   my $cmd = "/bin/mv -f \"$path\" \"$new_path\"";

   if (-e $new_path) {
      print "cmd='$cmd' cancelled because '$new_path' already exsits\n";   
      $res->{new_path} = $path;
      $res->{error}    = 1;
      return $res;
   }

   print "cmd=$cmd\n";

   my $will_do = 0;

   if ($opt->{force}) {
      $will_do ++;
   } else {
      print "Do you want to make this change? Y/N [$opt->{DefaultAnswer}]\n";
      my $answer = readline(*STDIN);

      if ($answer =~ /^\s*[yY]/) {
         $will_do ++;
      } elsif ($answer =~ /^\s*$/ && $opt->{DefaultAnswer} eq 'Y') {
         # if user only hit return key, we use the default as answer
         $will_do ++;
      }
   }

   if ($will_do) {
      if ($dryrun) {
         print "dryrun\n";
         $res->{new_path} = $path;    # in dryrun mode, use old path to continue traversing dir
         $res->{error}    = 0;
      } else {
         my $rc = system($cmd);
         print "executed\n";

         if ($rc) {
            $res->{new_path} = $path;  # if command failed, use old path to continue traversing dir
            $res->{error}    = 1;
         } 
      }
   } else {
      print "your answer is not yes. skipped.\n";
      $res->{new_path} = $path;      # if no change, use old path to continue traversing dir
      $res->{error}    = 0;
   }

   return $res;
}

