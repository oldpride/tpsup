#!/usr/bin/env perl

use warnings;
use strict;
use Data::Dumper;
$Data::Dumper::Sortkeys = 1;    # this sorts the Dumper output!
$Data::Dumper::Terse    = 1;

use Getopt::Long;
use Carp;
use File::Basename;
use TPSUP::FILE qw(
   get_out_fh
   close_out_fh
   tpglob
);

use TPSUP::UTIL qw(
  get_user
  get_homedir
  resolve_scalar_var_in_string
  eval_perl
);

use TPSUP::TMP qw(get_tmp_file);

use TPSUP::ENV qw(get_uname);

my $prog = $0;
$prog =~ s:.*/::;

my @env_vars = qw(SITEBASE SITESPEC TPSUP HOME);

sub usage {
   my ($message) = @_;

   print "$message\n" if $message;

   print STDERR << "END";
usage:

   $prog list                  - list configuration
   $prog pkg_name  target_basedir  - create package in target dir

   deploy using tpdist.

   -v                verbose mode

   -n|-dryrun        dryrun

   -c cfg_dir        default to \$SITESPEC/cfg/pkgs/pkg_name. 
                     there should be a pkg.cfg file under there.

                     cfg supports env vars: @env_vars

   -tpdist           use tpdist instead of rsync

examples:

   $prog list
   $prog pyslnm_test_input /cygdrive/c/users/$ENV{USERNAME}/pkgtest   # cygwin
   $prog pyslnm_test_input          /c/users/$ENV{USERNAME}/pkgtest   # gitbash not working yet, missing rsync

END

   exit 1;
}

my $verbose;
my $cfg_dir;
my $dryrun;
my $tpdist;

GetOptions(
   'verbose'  => \$verbose,
   'c=s'      => \$cfg_dir,
   'n|dryrun' => \$dryrun,
   'tpdist'   => \$tpdist,
) || usage("cannot parse command line: $!");

usage("wrong number of args") if @ARGV != 1 && @ARGV != 2;

if ( $ARGV[0] eq 'list' ) {
   system("ls $ENV{SITESPEC}/cfg/pkgs");
   exit 0;
}

usage("wrong number of args") if @ARGV != 2;

my ( $pkg_name, $target_basedir ) = @ARGV;

# change target_basedir to full path
if ( $target_basedir !~ m:^/: ) {
   $target_basedir = "$ENV{PWD}/$target_basedir";
}

my $flag = "";
if ($dryrun) {
   $flag = "-n";
}

our $cfg;
if ( !$cfg_dir ) {
   my $sitedir = $ENV{SITESPEC};
   die "\$SITESPEC is not defined" if !defined $sitedir;

   $cfg_dir = "$sitedir/cfg/pkgs";
   die "default cfg dir $cfg_dir not found" if !-d $cfg_dir;
} else {
   die "specified cfg dir $cfg_dir not found" if !-d $cfg_dir;
}

my $cfg_file = "$cfg_dir/$pkg_name/pkg.cfg";

my $string = `cat $cfg_file`;
die "cannot read $cfg_file" if $?;

eval $string;
if ($@) {
   croak "ERROR in parsing $cfg_file: $@\n";
   return undef;
}

my $dict = get_uname();

$dict->{USER} = get_user();
$dict->{HOME} = get_homedir();

for my $ev (@env_vars) {
   die "$ev is not defined in env." if !$ENV{$ev};
   $dict->{$ev} = $ENV{$ev};
}

$dict->{PKGBASE} = "$cfg_dir/base";

$verbose && print "dict = ", Dumper($dict);

# don't use /var/tmp as it may not exists in gitbash
my $tmp_file = get_tmp_file( "/tmp", $prog );

my $copy_cmd;
if ($tpdist) {
   $copy_cmd = "tpdist";
} else {
   # check whether rsync is available
   my $rsync = `which rsync`;
   if ( $? == 0 ) {
      $copy_cmd = "rsync";
   } else {
      $copy_cmd = "tpdist";
   }
}

my $i = 0;
for my $r ( @{ $cfg->{rsyncs} } ) {
   $i++;
   print "\n";

   my ( $source, $target_subdir, $condition, $files ) =
     @{$r}{qw(source target_subdir condition   files)};

   #remove leading spaces, and comments
   #  convert
   #        aaa
   #        bbb
   #        #ccc
   #  to
   #     aaa
   #     bbb
   #$files =~ s:^\s+::;
   #$files =~ s:\n\s+:\n:gs;

   my @list = split /\n/, $files;
   my @list2;
   for my $f (@list) {
      next if $f =~ /^\s*$/;    # skip blank lines
      next if $f =~ /^\s*#/;    # skip comments

      $f =~ s:^\s+::;           # remove leading spaces
      $f =~ s:\s+$::;           # remove ending spaces

      $f = resolve_scalar_var_in_string( $f,  $dict );

      push @list2, $f;
   }

   $verbose && print "list2 = ", Dumper(\@list2);

   if ( !@list2 ) {
      print "section #$i is skipped because it is empty\n";
      next;
   }

   $source    = resolve_scalar_var_in_string( $source,    $dict );
   $condition = resolve_scalar_var_in_string( $condition, $dict );
   # $files     = resolve_scalar_var_in_string( $files,     $dict );

   # apply glob
   my @list3 = tpglob(\@list2, {base => $source});

   if ( defined $condition ) {
      print "checking condition: $condition\n";
      if ( eval_perl($condition) ) {
         print "condition passed\n";
      } else {
         print "section #$i is skipped because it failed condition\n";
         next;
      }
   }

   print "section #$i processing\n";

   my $target_dir =
     defined $target_subdir
     ? "$target_basedir/$target_subdir"
     : $target_basedir;

   # create target dir if not exists
   if ( !-d $target_dir ) {
      print "creating target dir $target_dir\n";
      my $cmd = "mkdir -p '$target_dir'";
      if ( !$dryrun ) {
         print "cmd = $cmd\n";
         system($cmd);
         if ( $? != 0 ) {
            print "cmd=$cmd failed\n";
            exit 1;
         }
      } else {
         print "dryrun: cmd = $cmd\n";
      }
   }

   if ( $copy_cmd eq "rsync" ) {
      my $files = join( "\n", @list3 );

      my $ofh = get_out_fh($tmp_file);
      print {$ofh} $files;
      close_out_fh($ofh);

      # note: --files-from changed rsync default behavior
      #    https://stackoverflow.com/questions/16647476/how-to-rsync-only-a-specific-list-of-files
      #
      # -a                   archive mode, equals -rlptgoD
      # -r                   recursive.                       had to explicitly specify when --files-from
      # --delete             delete files not in source side. had to explicitly specify when --files-from
      #                      because we need to run rsync multiple time, we disable this to prevent later run
      #                      delete earlier run
      # --exclude='*[.]site' to skips site-specific files
      # --exclude='[.]git*'  to skip .git/ and .gitignore
      # -i                   to print item to be changed, ie, --itemize-changes
      # --out-format="%n%L"  to print out the relative path, only for -i, same as used in -v
      # [.]*[.]sw[pon]       tmp files of vi. vi only create up to 3 tmp files:  .*.swp, .*.swo, .*.swn

      my $cmd =
qq(rsync -ar $flag -exclude='[.]git*' --exclude='.nfs*' --exclude='[.]*[.]sw[pon]' --exclude='[.]idea' --exclude=__pycache__ --exclude='*[.]site' --out-format="%n%L" --files-from='$tmp_file' '$source' '$target_dir');
   
      print "cmd = $cmd\n";
      system($cmd);
  
   } else {
      # $copy_cmd eq "tpdist"

      # group files by folders to save tpdist times
      my $files_by_folder = {};
      for my $f (@list3) {
         my $dir = dirname($f);
         push @{ $files_by_folder->{$dir} }, $f;
      }

      my @dirs = sort(keys %$files_by_folder);
      for my $dir (@dirs) {
         my @files = @{ $files_by_folder->{$dir} };
         my $files_string = join( "' '", @files );
         my $cmd = "cd $source; tpdist $flag -q local  '$files_string' $target_dir/$dir";
         print "cmd = $cmd\n";
         system($cmd);
      }
   }
}

exit 0;

