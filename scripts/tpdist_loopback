#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use strict;
use Carp;

use POSIX;

my $timeout = 600;
my $port    = 6789;

my $prog = $0;
$prog =~ s:.*/::;

my $default_exclude = "[.]git/|[.]sw[op]|[.]nfs|[.]idea|[.]github|__pycache__";

sub usage {
   my ($message) = @_;

   print "$message\n" if $message;

   print <<"END";
Usage:

   $prog src1 src2 ... dst_dir
   
   this script runs on localhost like rsync.
   mainly for gitbash because gitbash doesn't have rsync.

   -port n            default to $port
   -timeout n         default to $timeout (seconds)
   -v                 verbose mode.

   -timeout seconds
                      time to wait for peer to finish a transaction, default to $timeout

   -stop              stop at seeing first change. for testing purpose only, to
                      reduce output.
                      note: this option is only on Passive side, where the change
                            is recorded.

   -n                 dryrun mode, list the filenames only

   -diff              diff mode. Besides listing file names as in dryrun mode, also
                      run diff if the file is on both sides. This mode will not
                      change any files.

   -maxsize           get up to this much bytes of total update, this is to limit
                      the size of update, meaning will drop some changes.
                      default is no limit.

   -match pattern     only files that matching this pattern (Perl RegEx style).
                      can be specified multiple times (in OR logic).

   -exclude pattern   exclude files that matching this pattern (Perl RegEx style)
                      can be specified multiple times (in OR logic).
                      default exclude pattern is '$default_exclude'

Examples:

   $prog       testdir1/* testdir3
   $prog -diff testdir1/* testdir3

END

   exit 1;
}

$| = 1;

my $verbose;
my $base;
my $dryrun;
my $diff;
my $maxsize = -1;    # -1 means no limit
my @matches;
my @excludes;
my $quiet;
my $stop_at_change;

GetOptions(
   'v|verbose' => \$verbose,
   'q|quiet'   => \$quiet,
   'n|dryrun'  => \$dryrun,
   'diff'      => \$diff,
   'maxsize=s' => \$maxsize,
   'timeout=s' => \$timeout,
   'match=s'   => \@matches,
   'exclude=s' => \@excludes,
   'stop'      => \$stop_at_change,
) || usage("cannot parse command line: $!");

usage("wrong number of args") if @ARGV < 2;

die "cannot be both quite and verbose" if $quiet && $verbose;

{
   # server running in background.
   #    only accept one connection and then exit.
   #    this is safer and cleaner - no need to worry about zombie process.
   my $cmd = "tpdist -maxAccept 1 -timeout $timeout server $port &";
   print "server cmd = $cmd\n";
   system($cmd) == 0 or die "server command failed: $!";
}

{
   # client

   my $exclude_pattern;
   if (@excludes) {
      $exclude_pattern = join( "|", @excludes );
   } else {
      $exclude_pattern = $default_exclude;
   }

   # client command uses array to handle spaces in file names
   my @cmd = ( "tpdist", "client", "localhost", "$port" );

   # pass through all options
   push @cmd, '-diff'   if $diff;
   push @cmd, '-dryrun' if $dryrun;
   push @cmd, '-maxsize', $maxsize if $maxsize > 0;
   push @cmd, '-stop' if $stop_at_change;
   push @cmd, '-v'    if $verbose;
   push @cmd, '-q'    if $quiet;
   push @cmd, '-match',   "'$_'" for @matches;
   push @cmd, '-exclude', "'$_'" for @excludes;

   # required arguments
   push @cmd, @ARGV;

   print "client cmd=", Dumper( \@cmd );
   system(@cmd) == 0 or die "client command failed: $!";
}
