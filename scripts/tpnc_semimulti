#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use strict;
use Carp;
use IO::Socket::INET;
use IO::Select;
use POSIX ":sys_wait_h";

my $prog = $0; $prog =~ s:.*/::;

my $number_of_retries = 1;
my $retry_interval = 3;

my $queue_depth = 1;

sub usage {
   my ($message) = @_;

   print "$message\n" if $message;

   print <<"END";
usage:
   This script is used as netcat (nc) if a host doesn't have netcat installed.

   - as a server, listening at a local port
   $prog -l local_port

   this server can accept multiple clients but can only talk to one client because
   there is only one STDIN, therefore, cannot direct the input to multiple clients
   at will.

   only the first forked process get the STDIN, the rest forked process will just
   echo back the client message

   - as a client, connecting to a remote port
   $prog remote_host remote_port

   -v                     verbose mode.

server switches:

   -w wait_time           wait this many seconds for client connection.
                          return code is 2 after timeout,
                          default to wait forever.

   -queue  int            listener queue depth, default to $queue_depth.

client switches:

   -r number_of_retries   default to only $number_of_retries

   -i retry_interval      default to $retry_interval (seconds).

   -w wait_time           wait this many seconds before giving up trying to connect.
                          default to system default.

examples:

   # basic client-server connection
   server_host\$ $prog -l 5555
   client_host\$ $prog server_host 5555

   # to copy a script from hostl to host2
   host1\$ cat script | $prog -l 5555
   host2\$ telnet host1 5555 > script

END
   exit 1;
}

$| = 1;

my $verbose;
my $localport;

STDIN->blocking(0); # http://www.perlmonks.org/?node_id=881518

my $wait_seconds;

GetOptions(
   'v|verbose'=>      \$verbose,
   'l=s'      =>      \$localport,
   'r=s'      =>      \$number_of_retries,
   'i=s'      =>      \$retry_interval,
   'w=s'      =>      \$wait_seconds,
   'queue=s'  =>      \$queue_depth,
) || usage("cannot parse command line: $!");

usage("number_of_retries=$number_of_retries is not a positive integer")
   if "$number_of_retries" !~ /^[1-9]\d*$/;

usage("retry_interval=$retry_interval is not a positive integer")
   if "$retry_interval" !~ /^[1-9]\d*$/;

usage("wait_seconds=$wait_seconds is not a positive integer")
   if defined($wait_seconds) && "$wait_seconds" !~ /^[1-9]\d*$/;

# http://www.thegeekstuff.com/2010/07/perl-tcp-udp-socket-programming

my $stdin_is_taken = 0;

if (defined $localport) {
   # this is a server
   usage("wrong number of args") if @ARGV;

   my $socket = new IO::Socket::INET (
      #LocalHost => '127.0.0.1',
      LocalPort => $localport,
      Proto => 'tcp',
      Listen => $queue_depth,
      Reuse => 1,
      Timeout => $wait_seconds,
   ) or die "ERROR in Socket Creation : $!\n";

   ACCEPT:
   while(1) {
      $verbose && print STDERR "SERVER Waiting for client connection on port $localport.\n";
      my $client_socket = $socket->accept();
      if (!$client_socket) {
         print STDERR "No new client connection. Server quits\n"; 
         exit(0);
      }

      # get the host and port number of newly connected client,
      my $peer_address = $client_socket->peerhost();
      my $peer_port = $client_socket->peerport();
   
      my $has_stdin = 0;
      if (! $stdin_is_taken) {
         $stdin_is_taken = 1;
         $has_stdin = 1;
         $verbose && print STDERR "Accepted new client connection from $peer_address:$peer_port\n";
      } else {
         $verbose && print STDERR "Accepted new client connection from $peer_address:$peer_port. we only echo client because STDIN was taken.\n";
      }
   
      my $child_pid = fork();
   
      die "fork() failed: $! " if ! defined($child_pid);
   
      if ($child_pid) {
         # this is parent
   
         while (1) {
            my $kid = waitpid(-1, WNOHANG);
            if (!$kid) {
               last;
            }
         }
   
         next ACCEPT;
      }
   
      my $select = IO::Select->new($client_socket) or die "IO::Select $!";
        
      if ($has_stdin) {
         $select->add(\*STDIN) or die "IO::Select $!";
      }
   
      SELECT:
      while (1) {
         $verbose && print STDERR "waiting for ready inputs\n";
   
         if (my @ready = $select->can_read(300)) {
            for my $fh (@ready) {
               if ($fh == $client_socket) {
                  $verbose && print STDERR "found client activities $peer_address:$peer_port\n";
   
                  my $data;
   
                  $client_socket->recv($data,1024000);
   
                  if (!$data) {
                     $verbose && print STDERR "client $peer_address:$peer_port quitted. \n";
                     last SELECT;
                  } else {
                     print $data;

                     if (!$has_stdin) {
                        $client_socket->send("server echo: " . $data);
                     }
                  }
               } else {
                  $verbose && print STDERR "found stdin activities\n";
                  my $data;
                  read(STDIN, $data, 1024000);
                  if (!$data) {
                     $verbose && print STDERR "STDIN closed. \n";
                     last SELECT;
                  } else {
                     $client_socket->send($data);
                  }
               }
            }
         }
      }
   
      exit(0);
   }
} else {
   # this is a client

   usage("wrong number of args") if @ARGV != 2;

   my ($host, $port) = @ARGV;

   my $server_socket;
   my $i = 1;

   while ($i <= $number_of_retries) {
      $verbose && print STDERR "trying to connect $host:$port\n";

      $server_socket = new IO::Socket::INET (
                                 PeerHost => $host,
                                 PeerPort => $port,
                                 Proto => 'tcp',
                                 Timeout => $wait_seconds,
                       );

      if ( ! $server_socket) {
         $verbose && print STDERR "cannot connect to $host: $port in $i try/tries\n";
         sleep $retry_interval;
       $i++;
         next;
      } else {
         $verbose && print STDERR "connected to $host:$port after $i try/tries\n";
         last;
      }
   }

   die "ERROR: give up after total $number_of_retries tries" if !$server_socket;

   my $select = IO::Select->new($server_socket) or die "IO::Select $!";
   $select->add(\*STDIN) or die "IO::Select $!";

   SELECT:
   while(1) {
      $verbose && print STDERR "waiting for ready inputs\n";

      if (my @ready = $select->can_read(300)) {
         for my $fh (@ready) {
            if ($fh == $server_socket) {
               $verbose && print STDERR "found server activities\n";

               my $data;

               $server_socket->recv($data,1024000);
               if (!$data) {
                  $verbose && print STDERR "server quitted.\n";
                  last SELECT;
               } else {
                  print $data;
               }
            } else {
               $verbose && print STDERR "found stdin activities\n";
               my $data;
               read(STDIN, $data, 1024000);
               if (!$data) {
                  $verbose && print STDERR "STDIN closed.\n";
                  last SELECT;
               } else {
                  $server_socket->send($data);
               }
            }
         }
      }
   }
}

exit 0;
