#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use Cwd;

my $prog = $0; $prog =~ s:.*/::;

sub usage {
   my ($message) = @_;

   print $message, "\n" if $message;

   print <<"END";
Usage:

   $prog path

   -v verbose mode

Examples:

   $prog /a/b/c/../d
   $prog /a/b/c/..
   $prog /a/b/./c/d
   $prog ../c
   $prog ./c
   $prog ./../c
   $prog /../c

END

   exit 1;
}

my $verbose;

GetOptions(
   'v|verbose' => \$verbose,
) || usage ("cannot parse command line: $!");

usage("wrong number of args") if @ARGV != 1;

my ($path) = @ARGV;

my $new_path = trim_path($path);

print "$new_path\n";

sub trim_path {
   my ($path, $opt) = @_;
   
   my $cwd = Cwd::abs_path();

   if ($path eq '.') {
      $path = $cwd;
   } elsif ($path =~ m:^[.]/(.*):) {
      my $rest = $1;
      $path = "$cwd/$rest";
   } elsif ($path eq '..') {
      $path = "$cwd/..";
   } elsif ($path =~ m:^[.][.]/(.*)$:) {
      my $rest = $1;
      $path = "$cwd/../$rest";
   }

   my @a1 = split /\/+/, $path;
   shift @a1; # shift away the undef before the first /

   my @a2;

   for my $e (@a1) {
      if ($e eq '.') {
         # convert /a/./b to /a/b
         next;
      } elsif ($e eq '..') {
         # convert /a/b/../c to /a/c
         pop @a2;
         next;
      } else {
         push @a2, $e;
         next;
      }
   }

   my $newpath = '/' . join('/', @a2);

   return $newpath;
}
