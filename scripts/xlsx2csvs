#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use Carp;
use TPSUP::XLSX qw(xlsx_to_csvs);

my $prog = $0; $prog =~ s:.*/::;

sub usage {
   my ($message) = @_;

   print "$message\n" if $message;

   print STDERR << "END";
usage:

   $prog input.xls output_prefix

   convert an xlsx file into csv files.

   output_prefix can have directory structure. The script will create the directory if not exising

   -tabs tabl,tab2,... only extract these tabs

 The following swithes will apply to the generated csv files 

   -me   match_expression     perl style, cell-based, eg, -m '\$Column1==1 && \$Column2 eq "B"'
   -xe exclude_expression     perl style, cell-based, eg, -m '\$Column3=~ /junk/ || !\$Column4'

   -mp match_pattern          perl style, line-based. Can be multiple, in AND logic.
                              eg. -e "junk1" -e "junk2"
                                 will match both "junk1 junk2" and "junk2 junk1",
                                 but will not match "junk1" or "junk2".

   -xp exclude_pattern        perl style, line-based. Can be multiple, in AND logic.
                              eg. -e "junk1" -e "junk2"
                                 will match both "junk1 junk2" and "junk2 junk1",
                                 but will not match "junk1" or "junk2".

   -delimiter char            default to ','

   -skip number               skip the first n lines of the file, because some files may comments
                              above header, default to 0, no skipping.

   -option setting            other options, eg,
                               -op InputNoHeader this indicates no header line in the input file
                               -op UsePosition this indicates to use cO,cl,... as column names

examples:

   - create an xlsx file from csv files
   csv2xlsx /tmp/test.xlsx diffcsvlong_test1.csv diffcsvlong_test2.csv
   ls -l /tmp/test.xlsx
   cat diffcsvlong_test1.csv diffcsvlong_test2.csv

   - decompose the xlsx file back into csv files
   $prog /tmp/test.xlsx /tmp/test_prefix
   ls -l /tmp/test_prefix*
   cat /tmp/test_prefix*

   - with match expression
   $prog -me '\$TICKER eq "C"' /tmp/test.xlsx /tmp/test_prefix
   ls -l /tmp/test_prefix*
   cat /tmp/test_prefix*

END

   exit 1;
}


my $verbose;
my $delimiter;
my $skiplines;
my @match_expression;
my @exclude_expression;
my @match_pattern;
my @exclude_pattern;
my @other_options;
my $tabString;

GetOptions(
   'v|verbose'     => \$verbose,
   'd|delimiter=s' => \$delimiter,
   'skip=s'        => \$skiplines,
   'me=s'          => \@match_expression,
   'xe=s'          => \@exclude_expression,
   'mp=s'          => \@match_pattern,
   'xp=s'          => \@exclude_pattern,
   'op|option=s'   => \@other_options,
   'tabs=s'        => \$tabString,
) || usage ("cannot parse command line: $!");

usage("wrong number of args") if @ARGV != 2;

my $xlsx = shift @ARGV;
my ($output_prefix) = @ARGV;

my @TabNames;
if ($tabString) {
   @TabNames = split /,/, $tabString;
}

my $opt = {
   MatchExps       => \@match_expression,
   ExcludeExps     => \@exclude_expression,
   MatchPatterns   => \@match_pattern,
   ExcludePatterns => \@exclude_pattern,
   ExtractTabNames => \@TabNames,
   delimiter       => $delimiter,
   skiplines       => $skiplines,
   verbose         => $verbose,
};

for my $op (@other_options) {
   if ($op =~ /^(TrimFloats)=(.+)/) {
      @{$opt->{$1}} = split /,/, $2;
   } elsif ($op =~ /^(.+?)=(.+)/) {
      $opt->{$1} = $2;
   } else {
      $opt->{$op} = 1;
   }
}

xlsx_to_csvs($xlsx, $output_prefix, $opt);
   
