#!/bin/bash

prog=`basename $0`
dir=`dirname $0`

usage () {
   cat <<EOF
usage:

   $prog path1 path2 ...

   restore time stamp according to the remote repo's time stamp.

   background:
   when I "git clone" a repo, the time stamp of the files are
   set to the time of the "git clone" command. I want to restore
   the time stamp to the time of the last commit.

   https://stackoverflow.com/questions/2179722/

   "the only timestamps recorded in the Git database are the 
   author and commit timestamps. I don't see an option for Git
    to modify the file's timestamp to match the most recent
     commit, and it makes sense that this wouldn't be the
      default behavior (because if it were, Makefiles wouldn't
       work correctly).

   You could write a script to set the modification date of
    your files to the the time of the most recent commit. 
   "

   -n          dryrun

   -v          versbose

   -a          means all files in the current repo that contains
               the path. Basically, the script will do 
                   "git rev-parse --show-toplevel" 
               to get the root of the repo, and then do "git ls-files"
               to get all files in the repo.

example:

   $prog .


EOF

   exit 1
}

verbose=N
dryrun=''
all=N

while getopts nva o;
do
   case "$o" in
      n) dryrun='--dry-run';;
      v) verbose=Y;;
      a) all=Y;;
      *) echo "unknow switch '$o'"; usage;;
   esac 
done

shift $((OPTIND-1))

if [ $# -eq 0 ]; then
   echo "wrong number of args"
   usage
fi

old_pwd=`pwd`

for p in "$@"; 
do
   cd $old_pwd

   if [ ! -d "$p" ]; then
      echo "path '$p' is not a directory"
      exit 1
   fi

   cd $p || exit 1

   if [ $all = Y ]; then
      git_root=`git rev-parse --show-toplevel`
      cd $git_root || exit 1
   fi
   # "for loop" vs "while read"
   # "for loop" is better when element has no space char inside.
   #            it won't mess up stdin.
   # "while read" is better when element has space char inside. 
   #            but it mess up stdin.
   # Because file names may have space char inside, we use "while read".
   # Also, we don't read stdin inside while loop, so we are safe.
   git ls-files | while read file; do
      echo "$path $file" 

      time="$(git log --pretty=format:%cd -n 1 \
            --date=format:%Y%m%d%H%M.%S --date-order -- "$file")";
      if [ -z "$time" ]; then
         echo "ERROR: skipping '$file' -- no git log found" >&2;
         continue;   
      fi;   
      touch -m -t "$time" "$file"; 
   done
done

   
   



   
