#!/usr/bin/env perl

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use Carp;
use TPSUP::LOG qw(itemize_log);

my $prog = $0; $prog =~ s:.*/::;

sub usage {
   my ($message) = @_;

   print "$message\n" if $message;

   print STDERR << "END";
usage:

   $prog start_pattern content_pattern filename

   patterns are perl regex pattern.
   'filename' can be a file name or stdin '-'.

   -v                verbose mode

   -maxlen   INT     max length of each item. this prevents running out of memory 
                     when mistakenly worked on a binary file. default to 64000.

   -maxlines INT     max number of lines each item. this prevents running out of memory 
                     when mistakenly worked on a binary file. default to 100.

   -warnMaxlen       warn when itemsize exceeds max length.

   -maxcount INT     max number of items returned in output  

   -p                prefix log file name

examples:

   $prog '\\d{8}-\\d{2}:\\d{2}:\\d{2}' 'com[.]sr[.]biz'     greplog_test.log
   $prog '\\d{8}-\\d{2}:\\d{2}:\\d{2}' 'item 1'             greplog_test.log
   $prog '\\d{8}-\\d{2}:\\d{2}:\\d{2}' 'item 1' -maxcount 1 greplog_test.log
   $prog '\\d{8}-\\d{2}:\\d{2}:\\d{2}' 'item 1' -maxlines 1 greplog_test.log  # no  output
   $prog '\\d{8}-\\d{2}:\\d{2}:\\d{2}' 'item 1' -maxlines 2 greplog_test.log  # has output
   $prog '\\d{8}-\\d{2}:\\d{2}:\\d{2}' 'item 1' -maxlen  30 greplog_test.log  # no  output
   $prog '\\d{8}-\\d{2}:\\d{2}:\\d{2}' 'item 1' -maxlen  50 greplog_test.log  # has output

END

   exit 1;
}

my $verbose;
my $maxlen   = 64000;
my $maxlines = 100;
my $maxcount;
my $warnMaxlen;
my $prefixLogName;

GetOptions(
   'verbose'     => \$verbose,
   'maxlen=s'    => \$maxlen,
   'maxlines=s'  => \$maxlines,
   'maxcount=s'  => \$maxcount,
   'warnMaxlen'  => \$warnMaxlen,
   'p'           => \$prefixLogName,
) || usage ("cannot parse command line: $!");

usage("wrong number of args") if !@ARGV || @ARGV < 3;

my $start_pattern = shift @ARGV;
my $content_pattern = shift @ARGV;

for my $input (@ARGV) {
   my $iterator = itemize_log($input, $start_pattern, {
                                                         MatchPattern=>$content_pattern,
                                                         MaxLen      =>$maxlen,
                                                         MaxLines    =>$maxlines,
                                                         MaxCount    =>$maxcount,
                                                         WarnMaxlen  =>$warnMaxlen,
                                                      });

   my $prefix = $prefixLogName ? "$input:" : "";

   while(defined(my $item = $iterator->())) {
      print "${prefix}${item}";
   }
}
