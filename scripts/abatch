#!/usr/bin/env perl

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use Carp;
use TPSUP::AUTOSYS qw(
   get_dependency
   query_jobs_superset
   print_autorep_J_header
   get_autorep_J_format
   autorep_J
   wait_job
   update_tally
   count_error_in_result
   parse_cmdline_jobs
);
use TPSUP::UTIL    qw(get_in_fh);
# use Carp::Always;

my $prog = $0; $prog =~ s:.*/::;

my $interval = 10;
my $interval_limit = 60;
my $DetailExpire = 24*3600;
my $StatusExpire = $interval-1;
my $repeat = 1;

sub usage {
   my ($message) = @_;
   print "$message\n" if $message;

   print << "END";
usage:

   $prog    jobllist1.txt joblist2.txt ...
   $prog -J job1 job2 ...
 
description:

   Run autosys jobs listed in a file, joblist.txt. 
   Within the file, one job per line, plus key=value as flags.
   The file allows comments (#) and blank lines.
   supported flags: offtrack wait_offtrack.

   Before running autosys jobs. The script will check them first:
      validate job's existence.
      print the current job status.
      spot jobs in OH (on-hold), OI (on-ice), or RU (running).
      spot jobs that have downstream dependency. 
      spot jobs that will trigger another job in the same list.

   After the check, the script will prompt for whether to proceed to run. (use -f to skip
   the prompt.)

   The running job is checked in $interval seconds; if not done after, $interval increases
   10 seconds for the next round, all the way up to $interval_limit seconds.

   If the script aborted halfway, you can comment out the jobs already ran and start
   again.

   -x  ExcludePattern  perl regex pattern, exclude job matched this pattern, case insensitive

   -m  MatchPattern    perl regex pattern, only run job matching this pattern, case insensitive

   -repeat number      repeat the same list of jobs 'number' of times. default to $repeat.

   -reset              reset caches on start, ie, time out all caches

   -df DetailFiles     Use DetailFiles instead. multiple filenames separated by coma.

   -sf StatusFiles     Use StatusFiles instead. multiple filenames separated by coma.

   -f                  force to run the jobs without prompt for confirmation.

   -n                  dryrun mode, check-only. will print the command but won't run the jobs.

   -v                  verbose mode

   -J                  args are jobnames. default to filenames

   -z                  skip checks

   use offtrack flag to parallelize jobs. for example, app1,app2,app3 are 3 independent apps.
   The following will speed up bouncing the apps.
       APP1_STOP offtrack=1
       APP2_STOP offtrack=1
       APP3_STOP offtrack=1

       # wait_offtrack=1 will wait previous offtrack jobs to finish before start new job
       APP1_START wait_offtrack=1 offtrack=1 
       APP2_START offtrack=1 
       APP3_START offtrack=1 

examples:

   $prog abatch_test_good.txt    # take from file
   $prog -                       # take from STDIN

   - test without autosys
   $prog -n -df adep_autorep_q_J_example.txt -sf adep_autorep_J_example.txt abatch_test_fatal.txt
   $prog -n -df adep_autorep_q_J_example.txt -sf adep_autorep_J_example.txt abatch_test_good.txt

   # test in-line job names
   $prog -n -df adep_autorep_q_J_example.txt -sf adep_autorep_J_example.txt -J test_box1 filter_data

   # test offtrack flags
   $prog -n -df adep_autorep_q_J_example.txt -sf adep_autorep_J_example.txt abatch_test_offtrack.txt

END

   exit 1;
}

my $verbose;
my $MatchPattern;
my $ExcludePattern;
my $DetailFiles;
my $StatusFiles;
my $force;
my $dryrun;
my $reset;
my $arg_is_job;
my $skip_checks;

GetOptions(
   'v|verbose'     => \$verbose,
   'z'             => \$skip_checks,
   'n|dryrun'      => \$dryrun,
   'reset'         => \$reset,
   'repeat=s'      => \$repeat,
   'f|force'       => \$force,
   'J'             => \$arg_is_job,
   'm=s'           => \$MatchPattern,
   'x=s'           => \$ExcludePattern,
   'df=s'          => \$DetailFiles,
   'sf=s'          => \$StatusFiles,
) || usage("cannot parse command line: $!");

usage("wrong number of args") if ! @ARGV;

my ($jobs, $seen, $jobFlags)
   = parse_cmdline_jobs(\@ARGV, {
                                         JFlag=>$arg_is_job,
                                  MatchPattern=>$MatchPattern,
                                ExcludePattern=>$ExcludePattern,
                        });

print "parsed input. querying autosys ...\n";

$verbose && print "jobs = ",     Dumper($jobs);
$verbose && print "seen = ",     Dumper($seen);
$verbose && print "jobFlags = ", Dumper($jobFlags);

my $opt = {
   DetailExpire => $DetailExpire,
   StatusExpire => $StatusExpire,
   DetailFiles  => $DetailFiles,
   StatusFiles  => $StatusFiles,
   Jobs         => $jobs, # narrow the query to these jobs
   verbose      => $verbose,

   # In a support role, we are often asked to run a list of jobs in sequence. Before we
   # run the list of jobs, we check whether one job will trigger (by a condition clause)
   # another job (B) in the same list. If this were true, we could unintentionally run
   # job B twice, which would be undesirable. We use the dependency module to look for
   # this situation.
   #
   # But if a job has both a condition clause and a start_times clause defined, then it
   # can run by itself only if both clauses are true.
   #
   # When we are asked to run a list of jobs manually on demand, the start_times clause 
   # normally is false, therefore, we can ignore the condition clause if the start_times
   # is defined in the # same job.
   IgnoreConditionWhenStartTimesDefined => 1,   
};

my $info;
if ($reset) {
   my $opt2 = {%$opt};
   $opt2->{DetailExpire} = 0; 
   $opt2->{StatusExpire} = 0; 
   $info = query_jobs_superset($seen, $opt2);
} else {
   $info = query_jobs_superset($seen, $opt);
}

my $exists_box_job;

for my $job (keys %$info) {
   my $box_name = $info->{box_name};

   if ($box_name) {
      $exists_box_job->{$box_name}->{$job} ++;
   }
}

print_autorep_J_header();

my $error = 0;
my $fatal = 0;

for my $jf (@$jobFlags) {
   my $job = $jf->{job};

   print "\n";

   if (!$info->{$job}) {
      print "$job\n";
      print "   FATAL: not found\n";
      $error ++;
      $fatal ++;
      next;
   }

   if (!$info->{$job}->{Status}) {
      print "$job\n";
      print "   FATAL: status not found. just deleted?\n";
      $error ++;
      $fatal ++;
      next;
   }

   printf get_autorep_J_format(), $job, $info->{$job}->{LastStart}, $info->{$job}->{LastEnd}, $info->{$job}->{Status};

   for my $f (sort (keys %$jf)) {
      print "   $f=$jf->{$f}\n" if $f ne 'job';
   }

   if ($info->{$job}->{Status} =~ /^(OH|OI)$/) {
      print "   FATAL: in $info->{$job}->{Status} mode.\n";
      $error ++;
      $fatal ++;
      next;
   }

   if ($info->{$job}->{Status} =~ /^(RU)$/) {
      print "   ERROR: in $info->{$job}->{Status} mode.\n";
      $error ++;
      next;
   }

   my @downDeps;
   my @willRunAgain;

   #my $dependency = get_dependency($job, $opt);
   my $dependency = get_dependency($job, {%$opt, DepExps=>['$Status !~ /OH|OI/']});

   # print "$job dependency=", Dumper($dependency);

   if ($dependency->{down}) {
      for my $dep (@{$dependency->{down}}) {
         if ($dep->{reason} ne 'box_child') {
            push @downDeps, "$dep->{detail}->{JobName} ($dep->{reason})";
         }

         if ($seen->{$dep->{detail}->{JobName}} && $dep->{reason} ne 'box_parent') {
            push @willRunAgain, $dep->{detail}->{JobName};
         }
      }
   }
    
   if (@downDeps) {
      print "   ERROR: downstream dependencies:\n      ", join("\n      ", @downDeps), "\n";
      $error ++;
   }

   if (@willRunAgain) {
      print "   FATAL: triggers other jobs in the list:\n      ", join("\n      ", @willRunAgain), "\n";
      $fatal ++;
      $error ++;
   }
}

my $total_job_count = scalar(@$jobs);
my $done_job_count = 0;

print "\n";
print "----------------------------------.\n";
print "Total $total_job_count jobs, $error errors, $fatal fatal.\n";

if ($fatal) {
   if ($skip_checks) {
      print "\n";
      print "ERROR: there are fatal errors but '-z' is set to skip checks\n";
   } else {
      exit $error;
   }
}

if (!$force) {
   my $run = $dryrun ? "dryrun" : "run";
   print "Do you want to proceed to $run the jobs $repeat time(s)? Y/N\n";
   my $answer = readline(*STDIN);

   if ($answer !~ /^\s*[yY]/) {
      print "your answer is not yes. quit\n";
      exit 0;
   }
}

$error = 0;  # reset $error to count run-time error

for (my $loop=1; $loop<=$repeat; $loop++) {
   my @tally;
   
   my $done_job_count = 0; 
   my @offtrack;

   for my $jf (@$jobFlags) {
      my $job = $jf->{job};

      if ($jf->{WAIT_OFFTRACK}) {
         print "\nwait all off-track jobs to finish before starting $job\n\n";

         if (!$dryrun) {
            for my $ot (@offtrack) {
               my ($job, $before_result) = @{$ot}{qw(job before_result)};
               my $after_result = wait_job($job, $before_result);
               update_tally(\@tally, $after_result, {PrintTally=>1});
   
               $done_job_count ++; 
               print "\n$done_job_count of $total_job_count complete.\n\n";

               my ($subcount, $sub_err) = count_error_in_result($after_result);
   
               if ($sub_err) {
                  print "ERROR:  $sub_err of $subcount subjobs did not complete successfully\n";
                  $error += $sub_err;
               }
            }
         }

         print "\nall offtrack jobs completed\n\n";

         @offtrack = (); # reset offtrack

         exit 1 if $error;;
      }

      my $autorep_cmd = "autorep -J $job";
   
      my @subjobs;
      my $subcount;
      my $before_result;
   
      if (!$dryrun) {
         $before_result = autorep_J("command=$autorep_cmd");
      
         while (!$before_result) {
            print "command=$autorep_cmd failed. will try again after 10 seconds\n";
            sleep $interval;
            $before_result = autorep_J("command=$autorep_cmd");
         }
      
         @subjobs  = sort(keys %$before_result);
         $subcount = scalar(@subjobs);
      }
   
      my $start_cmd = "sendevent -E FORCE_STARTJOB -J $job";
      
      if ($dryrun) {
         print "dryrun = $start_cmd\n";
      } else {
         print "cmd = $start_cmd\n";
         system($start_cmd);
         if ($?) {
            print "force start job failed: $!";
            exit 1;
         }   
      }   
   
      if ($jf->{OFFTRACK}) {
         print "\n$job runs off track\n\n";

         next if $dryrun;

         push @offtrack, { job=>$job, JobFlag=>$jf, before_result=>$before_result };
      } else {
         next if $dryrun;

         my $after_result = wait_job($job, $before_result);

         update_tally(\@tally, $after_result, {PrintTally=>1});

         $done_job_count ++; 
         print "\n$done_job_count of $total_job_count complete.\n\n";
      
         my ($subcount, $sub_err) = count_error_in_result($after_result);

         if ($sub_err) {
             print "Aborting - $sub_err of $subcount subjobs did not complete successfully\n";
             exit 1;
         }
      }
   }

   for my $ot (@offtrack) {
      my ($job, $before_result) = @{$ot}{qw(job before_result)};

      print "\nwaiting offtrack job $job\n\n";

      my $after_result = wait_job($job, $before_result);
      update_tally(\@tally, $after_result, {PrintTally=>1});

      my ($subcount, $sub_err) = count_error_in_result($after_result);

      if ($sub_err) {
         print "ERROR: $sub_err of $subcount subjobs did not complete successfully\n";
         $error += $sub_err;
      }

      $done_job_count ++; 
      print "\n$done_job_count of $total_job_count complete.\n\n";
   }

   last if $error;

   if ($dryrun) {
      print "dryrun mode. nothing done.\n";
      print_autorep_J_header();
   } 

   print "completed $loop of $repeat loops successfully\n\n" if $repeat >1;
}

print "complete with $error ERRORS.\n";
exit $error;
