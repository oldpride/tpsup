#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename;

our $our_cfg;
our %known;

# don't add 'my' in front of below because the variable is declared in the caller.
$our_cfg = {
   # global vars
   # use array to enforce sequencing because later var may rely on earlier var.
   # use single quote to delay their execution. they will be eval'ed later. 
   vars => [ 
      #dummy_global_var2 => '"hardcoded string"',
      dummy_global_var3 => 'get_log_example(\%known)',

      # the following is equivalent to `date`+chomp(). but chomp(`date`) does't work.
      #dummy_global_var1 => 'cmd_output_string("date")',
   ],

   cfg_by_entity => {
      test_code => {
         method => 'code',
         code => '
            update_knowledge("DUMMY", "DUM");
         ',
         AllowZero=>1,
      },
   },
   
   extra_keys => ['example', 'security', 'sedol', 'cusip', 'isin', 'tradeid'],

   alias_map => {
      sec => 'security',
   },
   
   # trace entities in this order
   trace_route => [ 
      'test_code', 
   ],

   example => <<"EOF",

   {prog} ANY

EOF

};

# this should be site-spec functions
use TPSUP::TRACER_test_sitespec qw(update_security_knowledge); 

sub get_log_example {
   my ($known) = @_;

   print "get_log_example() get knowledge=" . Dumper($known);
   #print "in cfg ", __LINE__, " namespace = ", __PACKAGE__, "\n";

   my $dir = dirname(__FILE__);
   my $log = "$dir/tptrace_test.log";

   return $log;
}

