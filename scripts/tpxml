#!/usr/bin/env perl

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use Carp;
use TPSUP::XML qw(query_xml);
use YAML;

my $prog = $0; $prog =~ s:.*/::;

sub usage {
   my ($message) = @_;

   print "$message\n" if $message;

   print STDERR << "END";
usage:

   $prog file.xml

   This is a workaround when xmllint or xmlstarlet is not available. (We have
   so many old machines missing the basic utilities.) I tried to install
   XML::Parser but some of our platforms are too old to install.

   NOTE: XML protocol will replace newline with space in the attribute

   -v verbose

   -path string           perl-style, eg, -path {FIXSession}->{suppress-out}
                          can repeat

   -ForceArray a,b,c      force this tags into array.

   -KeyAttr tag=attr      can repeat, eg, -KeyAttr tl=a1 -KeyAttr t2=a2

   -addRoot string        add a root node

   -yamlDump              Dump into YAML format

examples:

   # To see the XML general structure
   $prog XML_test.xml
   $prog -ForceArray FIXSession XML_test.xml

   # To get a branch or leaf, taking steps to narrow down to your target
   $prog -path 'return \$r' XML_test.xml
   $prog -path 'return \$r->{FIXSession}' XML_test.xml
   $prog -path 'return \$r->{FIXSession}->{"suppress-out"}' XML_test.xml

   # 'return' is optional
   $prog -path '\$r->{FIXSession}->{"suppress-out"}' XML_test.xml
   
   # return the first match in an array
   $prog -path \\
      'for my \$cd (\@{\$r->{CD}}) {
         if (\$cd->{YEAR} == 1990) {
            return \$cd->{ARTIST} }}' XML_test_nested.xml

   # return all matches in an array
   $prog -path 'map {\$_->{ARTIST}} grep {\$_->{YEAR} == 1990} \@{\$r->{CD}}' XML_test_nested.xml

   # Return an array
   $prog -path 'my \@a=keys(\%{\$r->{FIXSession}}); return \\\@a;' XML_test.xml

   # This is equivalent to xmllint
   $prog -path '\$r' XML_test.xml

   # Dump into Yaml format
   $prog -path '\$r' -yamlDump XML_test.xml
   $prog -path '\$r' -yamlDump XML_test_nested.xml

   # this add a root node to an file without root node
   $prog -addRoot xml XML_test_withoutRoot.xml

END

   exit 1;
}

my $tag_string;
my $verbose;
my %attr_by_key;
my $ForceArrayString;
my @paths;
my $addRoot;
my $yamlDump;

GetOptions(
   'v|verbose'    => \$verbose,
   'ForceArray=s' => \$ForceArrayString,
   'KeyAttr=s'    => \%attr_by_key,
   'p|path=s'     => \@paths,
   'addRoot=s'    => \$addRoot,
   'yamlDump|yaml'=> \$yamlDump,
) || usage ("cannot parse command line: $!");

usage("wrong number of args") if @ARGV != 1 ;

my $file = shift @ARGV;

my $rows = query_xml($file, {
   KeyAttr     =>\%attr_by_key,
   ForceArray  =>$ForceArrayString,
   verbose     =>$verbose,
   paths       =>\@paths,
   AddRootNode =>$addRoot,
});

$verbose && print Dumper($rows);

#my $type = ref $rows;
#if ($type eq 'ARRAY' || $type eq 'HASH') {

if ($yamlDump) {
   print YAML::Dump($rows);
} else {
   $Data::Dumper::Terse = 1;
   
   for my $r (@$rows) {
      my $string = Dumper($r);
      print $string;
   }
}

exit 0;
   
