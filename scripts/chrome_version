#!/bin/bash

prog=`basename $0`

usage () {
   cat >&2 <<EOF
usage:

   $prog chrome_path
   $prog default

   print chrome version

   'default' means searching chrome in PATH, not necessarily the default installation path.

   -v        verbose
examples:

   $prog default

   for windows
   $prog 'C:/Program Files/Google/Chrome/Application/chrome.exe'
   $prog c:/Users/tian/sitebase/Windows/10.0/Chrome/Application/chrome.exe

   for linux
   $prog /usr/bin/google-chrome

   for mac
   $prog /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome

EOF

   exit 1
}

# https://stackoverflow.com/questions/50880917/
# examples:
#     powershell -command "&{(Get-Item 'C:/Program Files/Google/Chrome/Application/chrome.exe').VersionInfo.ProductVersion}"
#     (win10-python3.10) william@tianpc2:/c/Users/william/chrome/Application$ powershell -command "&{(Get-Item 'c:/Users/william/chrome/Application/chrome.exe').VersionInfo.ProductVersion}"

verbose=N
while getopts v o;
do
   case "$o" in
      v) verbose=Y;;
      #s) site_dir="$OPTARG";;
      *) echo "unknow switch '$o'"; usage;;
   esac
done

shift $((OPTIND-1))

if [ $# -ne 1 ]; then
   echo "wrong number of args"
   usage
fi

p=$1

uname=`uname -a`

if [ "$p" = "default" ]; then
   if [[ "$uname" =~ Linux ]]; then
      target=google-chrome
   else 
      target=chrome
   fi

   p=`which $target|sed 's/ /\\ /g'`
   if [ "X$p" = "X" ]; then
      echo "ERROR: cannot find $target in PATH=$PATH" >&2
      exit 1
   fi

   [ $verbose = Y ] && echo "p=$p" >&2
fi   

if [[ "$uname" =~ Linux|Darwin ]]; then
   # $ google-chrome --version
   # Google Chrome 99.0.4844.74 
   

   [ $verbose = Y ] && set -x
   "$p" --version | cut -d" " -f3
else 
   [ $verbose = Y ] && set -x

   source_termtype=`termtype get`
   target_termtype=batch
   new_p=`convertpath -s $source_termtype -t $target_termtype $p`

   # add .exe if it doesn't have one
   if [[ ! "$new_p" =~ \.exe$ ]]; then
      new_p=$new_p.exe
   fi

   [ $verbose = Y ] && echo "new_p=$new_p" >&2
   powershell -command "&{(Get-Item '$new_p').VersionInfo.ProductVersion}"
fi
