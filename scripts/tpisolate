#!/usr/bin/perl

#http: //www.softpanorama.org/Scripting/Perlorama/perl_namespaces.shtml

use strict;
use warnings;
use Data::Dumper;
use Carp;
use Getopt::Long;
use TPSUP::UTIL qw(get_in_fh get_out_fh);

my $prog = $0; $prog =~ s:.*/::;

sub usage {
   my ($msg) = @_;

   print STDERR "$msg\n" if $msg;

   print STDERR << "EOF";
usage:

   $prog perl.pl

description:
   isolate a TPSUP perl which uses TPSUP:XXX modules into a self-contained script.

   -v          verbose mode

   -o output   default to STDOUT

   -libdir     dir default to \$TPSUP/lib/perl

examples:

   $prog xmlloop

EOF

   exit 1;
}

my $verbose;
my $output;
my $libdir;

GetOptions(
   "v"        => \$verbose,
   "o=s"      => \$output,
   "libdir=s" => \$libdir,
) or usage("Could not parse command line: $!");

usage("wrong number of args") if @ARGV != 1;
   
my ($file) = @ARGV;

if (!defined $libdir) {
   usage("One of \$TPSUP or -libdir must be setting") if !defined $ENV{TPSUP};
   $libdir = "$ENV{TPSUP}/lib/perl";
}

my $info_by_pkg;
my $dependency;

my $result = parse_pkg('', {file=>$file});

if (!$result) {
   print STDERR "failed to parse $file\n";
   exit 1;
}

print STDERR "info_by_pkg = ", Dumper($info_by_pkg);

my $ofh = get_out_fh($output);

for my $pkg ( sort(keys %$info_by_pkg) ) {
   my $pkgfile = $info_by_pkg->{$pkg}->{file};
   my $import = $info_by_pkg->{$pkg}->{import};
   my @functions = $import ? sort(keys %$import) : ();

   print STDERR "print $pkgfile\n";

   if ($pkg) {
      print {$ofh} "#################################################################\n";
      print {$ofh} "#\n";
      print {$ofh} "# $pkgfile\n";
      print {$ofh} "#\n";
      print {$ofh} "#################################################################\n";
   }

   my $ifh = get_in_fh($pkgfile);

   my $comment_till_semicolon = 0;

   while (<$ifh>) {
      my $line = $_;
      chomp $line;

      next if $line eq '1';

      if ($comment_till_semicolon) {
         print {$ofh} "#$line\n";
         
         if ($line =~ /^[^#]*;/) {
            $comment_till_semicolon = 0; # done with this comment
         }

         next;
      }

      if ($line =~ /^\s*use\s+TPSUP::/) {
         print {$ofh} "#$line\n"; # comment it out

         $line =~ s/#.*//;

         if ( $line =~ /;/ ) {
            $comment_till_semicolon = 0; # done with this comment
         } else {
            $comment_till_semicolon = 1; # need to keep commenting
         }

         next;
      } elsif ($line =~ /^use warnings/) {
         print {$ofh} "$line\n";

         # http://perldoc.perl.org/warnings.html
         #
         # 'no warnings "once"' disables this warning
         # Name "TPSUP::Expression::RESET" used only once: possible typo at ...
         #
         # 'no warnings "closure"' disables this warning
         # Variable "$ref" will not stay shared at /tmp/junk.pl line 4481.
       #
         print {$ofh} "no warnings qw(once closure);\n";

         next;
      }

      for my $func (@functions) {
         my $pkg2 = $import->{$func};
         $line =~ s/(\b)($func)(\b)/${1}TPSUP::${pkg2}::${func}$3/g;
      }

      print {$ofh} "$line\n";
   }

   close $ifh if $ifh != \*STDIN;
}

if ($info_by_pkg) {
   print {$ofh} "1\n";
}

close $ofh if $ofh != \*STDOUT;

if ($dependency) {
   print "\n";
   print "----------extra dependency----------------\n";
   for my $other_pkg (sort (keys %$dependency)) {
      for my $msg ( @{$dependency->{$other_pkg}} ) {
         print "$other_pkg: $msg\n";
      }
   }
   print "\n";
}

exit 0;

########################################################################
# subs
########################################################################

sub parse_pkg {
   my ($pkg, $opt) = @_;

   return 1 if $info_by_pkg->{$pkg};

   my $file = $opt->{file} ? $opt->{file} : "$libdir/TPSUP/${pkg}.pm";

   if (! -f $file) {
      print STDERR "cannot find $file\n";
      return undef;
   }

   $info_by_pkg->{$pkg}->{file} = $file;

   print STDERR "parsing $file ...\n";

   my $ifh = get_in_fh($file);

   my $new_pkg;

   while (<$ifh>) {
      my $line = $_;
      my $orig_line = $_;

      chomp $line;
      chomp $orig_line;

      $line =~ s/#.*//; #skip comment

      next if $line =~ /^\s*$/; #skip blank line

      #use TPSUP::Expression;
      #
      #use TPSUP::UTIL qw(recursive_handle
      #                   transpose_arrays
      #                   compile_perl_array
      #                  );
      #
      #use TPSUP::CSV qw(render_csv);
      
      if ($new_pkg) {
         # "use TPSUP::.." already started before, not done yet
       
         if ($line =~ /^\s*([^);]+)/) {
            my $string = $1;
            my @functions = split /\s+/, $string;
            for my $f (@functions) {
               next if !$f;
               $info_by_pkg->{$pkg}->{import}->{$f} = $new_pkg;
            }
         }

         if ($ line =~ /[);]/) {
            $new_pkg = undef; # done with "use TPSUP:: ...;"
         }
      } elsif ($line =~ /^\s*use\s*TPSUP::([^;\s]+)\s*(\S*.*)/) {
         # a new "use TPSUP::.." starts
       
         $new_pkg = $1;
         my $rest = $2;

         my $result = parse_pkg($new_pkg);

         if (!$result) {
            print STDERR "failed to parse new_pkg=$new_pkg (in $file at line: $orig_line)\n";
            return undef;
         }

         if ($rest eq ";") {
            # no specific function to import, wierd
       
            if ($new_pkg !~ /^Expression$/) {
               print STDERR "In $file: $orig_line. no function specified\n";
            }

            $new_pkg = undef; # done with this pkg
         } elsif ($rest =~ /[(]([^);]*)/) {
            my $string = $1;
            my @functions = split /\s+/, $string;
            for my $f (@functions) {
               next if !$f;
               $info_by_pkg->{$pkg}->{import}->{ $f} = $new_pkg;
            }
         
            if ($rest =~ /[);]/) {
               $new_pkg = undef; # done with this pkg
            }
         }
      } elsif ($ line =~ /TPSUP::([^;:,=\s(]+)/) {
         $new_pkg = $1;

         my $result = parse_pkg($new_pkg);

         if (!$result) {
            print STDERR "failed to parse new_pkg=$new_pkg (in $file at line: $orig_line)\n";
            return undef;
         }

         $new_pkg = undef; # done with this pkg
      } elsif ($line =~ /^\s*use\s*([^;\s]+)/) {
         my $other_pkg = $1;

         my $other_pkg_file = $other_pkg;

         $other_pkg_file =~ s/::/\//g;
         $other_pkg_file =~ s/$/.pm/;

         my $path;

         eval "use $other_pkg; \$path = \$INC{'$other_pkg_file'}";

         if (!$path) {
            push @{$dependency->{$other_pkg}}, "cannot find file $other_pkg_file, used by $file";
         } elsif ($path =~ /tpsup/) {
            # these are non-homemade, non-OS-build-in packages, requiring download
            push @{$dependency->{$other_pkg}}, "need to download pkg $path used by $file";
         }
      }
   }

   close $ifh if $ifh != \*STDIN;

   return 1;
}
