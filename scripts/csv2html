#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use Carp;
use TPSUP::CSV  qw(csv_to_html);
use TPSUP::UTIL qw(get_out_fh);

my $prog = $0; $prog =~ s:.*/::;

sub usage {
   my ($message) = @_;

   print "$message\n" if $message;

   print STDERR << "END";
usage:

   $prog input.csv

   convert csv file into html.

   -me match_expression    perl style, cell-based, eg, -m '\$Column1==1 && \$Column2 eq "B"'
   -xe exclude_expression  perl style, cell-based, eg, -m '\$Column3=~ /junk/ || !\$Column4'

   -mp match_pattern       perl style, line-based. Can be multiple, in AND logic.
                           eg. -e "junk1" -e "junk2"
                              will match both "junk1 junk2" and "junk2 junk1",
                              but will not match "junk1" or "junk2".

   -xp exclude_pattern     perl style, line-based. Can be multiple, in AND logic.
                           eg. -e "junk1" -e "junk2"
                              will match both "junk1 junk2" and "junk2 junk1",
                              but will not match "junk1" or "junk2".

   -delimiter string       default to ","

   -skip number            skip the first n lines of the file, because some files may comments
                           above header, default to 0, no skipping.

   -option setting         other options, eg,
                              -op InputNoHeader this indicates no header line in the input file
                              -op UsePosition this indicates to use cO,cl,... as column names

   -title string           html title

   -o output.hmtl          default to STDOUT

   -TableOnly              only print the table part, not the whole html body

   -RowExp exp -RowAct c1=attr1=val1,attr2=val2;c2=attr1=val1,attr2=val2,...
                           if a row matched the exp, then these attributes will be added to 
                           the cell's tag
                              <td color=red>100</td>

                           These two switches can be used multiple times but must come in pairs.

   -ColAtrrVal c1=attr1=val1,attr2=val2;c2=attr1=val1,attr2=val2,...
                           set default attr and value for the specified columns: c1, c2, ...

examples:

    $prog            tpcsv2_test.csv
    $prog -TableOnly tpcsv2_test.csv

    $prog \\
         -ColAttrVal 'string=bgcolor=green;value=bgcolor=green' \\
         -RowExp '\$value<300' -RowAct 'string=bgcolor=red;value=bgcolor=red' \\
         -RowExp '\$value<700' -RowAct 'string=bgcolor=orange;value=bgcolor=orange' \\
         tpcsv2_test.csv

END
   
   exit 1;
}

my $verbose;
my $delimiter;
my $skiplines;
my @match_expression;
my @exclude_expression;
my @match_pattern;
my @exclude_pattern;
my @other_options;
my $title;
my $TableOnly;
my $output = "-";
my @RowExps;
my @RowActs;
my @ColAttrVals;

GetOptions(
   'v|verbose'     => \$verbose,
   'TableOnly'     => \$TableOnly,
   'd|delimiter=s' => \$delimiter,
   'skip=s'        => \$skiplines,
   'me=s'          => \@match_expression,
   'xe=s'          => \@exclude_expression,
   'mp=s'          => \@match_pattern,
   'xp=s'          => \@exclude_pattern,
   'op|option=s'   => \@other_options,
   'title=s'       => \$title,
   'o|output=s'    => \$output,
   'RowExp=s'      => \@RowExps,
   'RowAct=s'      => \@RowActs,
   'ColAttrVal=s'  => \@ColAttrVals,
) || usage ("cannot parse command line: $!");

usage("wrong number of args") if @ARGV != 1;

my ($csv) = @ARGV;

my $opt = {
   MatchExps       => \@match_expression,
   ExcludeExps     => \@exclude_expression,
   MatchPatterns   => \@match_pattern,
   ExcludePatterns => \@exclude_pattern,
   delimiter       => $delimiter,
   skiplines       => $skiplines,
   verbose         => $verbose,
   TableOnly       => $TableOnly,
   CSVHTMLTitle    => $title,
   HTMLRowExp      => \@RowExps,
   HTMLRowAct      => \@RowActs,
   ColAttrVal      => \@ColAttrVals,
};

for my $op (@other_options) {
   if ($op =~ /^(TrimFloats)=(.+)/) {
      @{$opt->{$1}} = split /,/, $2;
   } elsif ($op =~ /^(.+?)=(.+)/) {
      $opt->{$1} = $2;
   } else {
      $opt->{$op} = 1;
   }
}

my $error = 0;

my $html_string = csv_to_html($csv, $opt);

my $out_fh = get_out_fh($output);

print {$out_fh} $html_string;

exit 0;

