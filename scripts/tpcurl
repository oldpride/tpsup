#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use Carp;
use TPSUP::UTIL qw(
   parse_rc
   tp_join
);


my $method = 'GET';

my $prog = $0; $prog =~ s:.*/::;

sub usage {
   my ($message) = @_;

   print "$message\n" if $message;

   print STDERR << "END";
usage:

   $prog -- curl_args

   -e entry_name       

   -b book.csv           this contains the encoded information, example format below
                         default to ~/.tpsup/book.csv

   -jout                 use python to print json output

   -n | -dryrun          dryrun mode

   -m method             default to $method

   # this will fail at commandpattern matching
   $prog -- -silent -X GET --header 'Accept: application/json' https://abc.org/LCA2/index.php

END

   exit 1;
}

my $book;
my $entry_name;
my $json_output;
my $dryrun;

GetOptions(
   'book=s'       =>      \$book,
   'entry=s'      =>      \$entry_name,
   'jout'         =>      \$json_output,
   'n'            =>      \$dryrun,
   'dryrun'       =>      \$dryrun,
   'm=s'          =>      \$method,
) || usage ("cannot parse command line: $!");

usage("wrong number of args") if !@ARGV;

delete $ENV{'LD_LIBRARY_PATH'};
delete $ENV{'http_proxy'};
delete $ENV{'https_proxy'};

my $command = "LD_LIBRARY_PATH='' http_proxy='' https_proxy=''";
my @cmds = ("LD_LIBRARY_PATH=''", "http_proxy=''", "https_proxy=''");

if ($entry_name) {
   $command .= " tpentry -- /usr/bin/curl -u tpentry{$entry_name}{user}:tpentry{$entry_name}{decoded}";
   push @cmds, ("tpentry", "--", "/usr/bin/curl", 
                "-u", "tpentry{$entry_name}{user}:tpentry{$entry_name}{decoded}");
} else {
    $command .= " /usr/bin/curl";
    push @cmds, ("/usr/bin/curl"); 
}

$command .= " " . tp_join(\@ARGV); # tp_join takes care of wrapping with quotes
push @cmds, @ARGV;

if ($json_output) {
   $command .= " |python -m json.tool";
   push @cmds, ("|", "python", "-m", "json.tool");
}

# this doesn't work because the 1st arg of array must be executable
# print STDERR "cmds = ", Dumper(\@cmds);
# system(@cmds);

if ($dryrun) {
   print "DRYRUN: $command\n";
} else {
   print STDERR "command = $command\n";
   system($command);
   my $rc = parse_rc($?)->{rc};
   if ($rc) {
      print STDERR "ERROR: command failed: rc=$rc\n";
      exit 1;
   }
}


exit 0;
