#!/bin/bash

depot_dir=$MYBASE/depot
site_dir=$MYBASE/github

usage() {
   cat <<EOF
usage:

   "git pull" from github to local depot.
   "rsync" from local depot to "mytp".

   $0 check         # check only. "git pull" but not "rsync".
   $0 diff          # check and then diff
   $0 sync          # "git pull" and "rsync"

   -d depot_dir     where you should see <depot_dir>/tpsup. 
                    default to $depot_dir. 
                    this is the dir to do clone tpsup from github.com

   -s site_dir      where you should see  <site_dir>/tpsup.
                    dfault to $site_dir

   -m pattern       only apply to missing files that match this pattern

   -l               rsync from depot to "mytp", without "git pull"

EOF

   exit 1
}

local_only=N
missing_pattern=""

while getopts s:d:l o; do
   case "$o" in
   d) depot_dir="$OPTARG" ;;
   s) site_dir="$OPTARG" ;;
   m) missing_pattern="$OPTARG" ;;
   l) local_only=Y ;;
   *)
      echo "unknow switch '$o'"
      usage
      ;;
   esac
done

shift $((OPTIND - 1))

if [ $# -ne 1 ]; then
   echo "wrong number of args"
   usage
fi

action=$1

cd $depot_dir/tpsup || exit 1

# use native LD_LIBRARY_PATH as third path LD_LIBRARY_PATH (eg Anaconda3's) can contain expired certificate
unset LD_LIBRARY_PATH
echo "unset LD_LIBRARY_PATH"

if [ $local_only = N ]; then
   (
      set -x
      git_diff_remote -v .
   )
   (
      set -x
      gitpull
   ) # gitpull is a wrapper of "git pull"
fi
echo ""

if [ $action = check -o $action = diff ]; then
   dryrun_flag="-n"
elif [ $action = sync ]; then
   dryrun_flag=""
else
   echo "unknown action='$action'"
   usage
fi

# -a                   archive mode, equals -rlptgoD
# --delete             delete files not in source side. we didn't use this for safety.
# --existing --ignore-non-existing
#                      only to update existing files. we don't want to bring in too many files.
# --ignore-existing    skip updating files that already exist in destination.
# --exclude='*[.]site' to skips site-specific files
# --exclude='[.]git*'  to skip .git/ and .gitignore
# -i                   to print item to be changed, ie, --itemize-changes
# --out-format="%n%L"  to print out the relative path, only for -i, same as used in -v
# [.]*[.]sw[pon]       tmp files of vi. vi only create up to 3 tmp files:  .*.swp, .*.swo, .*.swn

if [ "X$missing_pattern" = "X" ]; then
   files=$( (
      set -x
      rsync $dryrun_flag -a -i --existing --exclude='[.]git*' --exclude='.nfs*' --exclude='[.]*[.]sw[pon]' --exclude='[.]idea' --exclude=__pycache__ --exclude='*[.]site' --out-format="%n%L" $depot_dir/tpsup $site_dir/
   ))

   echo ""
   echo "$files"

   if [ $action = diff ]; then
      # skip dir
      for f in $(echo "$files" | egrep -v '/$'); do
         echo ""
         (
            set -x
            diff $depot_dir/$f $site_dir/$f
         )
      done
   fi
else
   dryrun_flag="-n"
   files=$( (
      set -x
      rsync $dryrun_flag -a -i --ignore_existing --exclude='[.]git*' --exclude='.nfs*' --exclude='[.]*[.]sw[pon]' --exclude='[.]idea' --exclude=__pycache__ --exclude='*[.]site' --out-format="%n%L" $depot_dir/tpsup $site_dir/
   ))

   for f in $(echo "$files" | egrep -v '/$'); 
   do
      if [[ "$f" ~ "$missing_pattern" ]]; then
         echo $f
      fi    
   done
fi
