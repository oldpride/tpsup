#!/bin/bash

prog=$(basename $0)

depot_dir=$MYBASE/depot
site_dir=$MYBASE/github

usage() {
   cat <<EOF
usage:

   $prog check             # check only. "git pull" but not "rsync".
   $prog diff              # check and then diff
   $prog sync              # "git pull" and "rsync"
   $prog add  pattern [y]  # add missing files to "mytp". no "git pull" nor "rsync"
   $prog del  pattern [y]  # delete files in "mytp" that are not in "local depot"

   remote repo   ------------> local depot  ------------>  mytp
                 git pull                    rsync

   "git pull" from github to local depot.
   "rsync" from local depot to "mytp".

   "rsync" will only update existing files. 
      It will not delete files in "mytp" that are not in "local depot".
      neither will it bring in new files from "local depot" to "mytp".

   -d depot_dir     where you should see <depot_dir>/tpsup. 
                    default to $depot_dir. 
                    this is the dir to do clone tpsup from github.com

   -s site_dir      where you should see  <site_dir>/tpsup.
                    dfault to $site_dir

   -l               rsync from depot to "mytp", without "git pull"

examples:

   $prog check
   $prog diff
   $prog sync
   $prog -l sync          # not "git pull", only rsync
   $prog add  tptrace
   $prog add  tptrace yes

EOF

   exit 1
}

local_only=N

while getopts s:d:l o; do
   case "$o" in
   d) depot_dir="$OPTARG" ;;
   s) site_dir="$OPTARG" ;;
   l) local_only=Y ;;
   *)
      echo "unknow switch '$o'"
      usage
      ;;
   esac
done

shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
   echo "wrong number of args"
   usage
fi

action=$1

cd $depot_dir/tpsup || exit 1

# use native LD_LIBRARY_PATH as third path LD_LIBRARY_PATH (eg Anaconda3's) can contain expired certificate
unset LD_LIBRARY_PATH
echo "unset LD_LIBRARY_PATH"

if [ $local_only = N ]; then
   # (
   #    set -x
   #    git_diff_remote -v .
   # )
   (
      set -x
      gitpull
   ) # gitpull is a wrapper of "git pull"
fi
echo ""

if [ $action = check -o $action = diff -o $action = sync ]; then
   if [ $# -ne 1 ]; then
      echo "wrong number of args"
      usage
   fi

   if [ $action = sync ]; then
      dryrun_flag=""
   else
      dryrun_flag="-n"
   fi

   # -a                   archive mode, equals -rlptgoD
# --delete             delete files not in source side. we didn't use this for safety.
# --existing --ignore-non-existing
#                      only to update existing files. we don't want to bring in too many files.
# --ignore-existing    skip updating files that already exist in destination.
# --exclude='*[.]site' to skips site-specific files
# --exclude='[.]git*'  to skip .git/ and .gitignore
# -i                   to print item to be changed, ie, --itemize-changes
# --out-format="%n%L"  to print out the relative path, only for -i, same as used in -v
# [.]*[.]sw[pon]       tmp files of vi. vi only create up to 3 tmp files:  .*.swp, .*.swo, .*.swn

   files=$( (
      set -x
      rsync $dryrun_flag -a -i --existing --exclude='[.]git*' --exclude='.nfs*' --exclude='[.]*[.]sw[pon]' --exclude='[.]idea' --exclude=__pycache__ --exclude='*[.]site' --out-format="%n%L" $depot_dir/tpsup $site_dir/
   ))

   echo ""
   echo "$files"

   if [ $action = diff ]; then
      # skip dir
      for f in $(echo "$files" | egrep -v '/$'); do
         echo ""
         (
            set -x
            diff $depot_dir/$f $site_dir/$f
         )
      done
   fi

elif [ $action = add -o $action = del -o $action = delete ]; then
   if [ $# -ne 2 -a $# -ne 3 ]; then
      echo "wrong number of args"
      usage
   fi

   pattern=$2
   really_do=N

   if [ $# -eq 3 ]; then
      # the 3rd arg is "yes" or "y", case insensitive
      if [[ $3 =~ ^[yY]([eE][sS])*$ ]]; then
         really_do=Y
      else
         echo "unknown arg '$3'"
         usage
      fi
   fi

   if [ $action = add ]; then
      files=$( (
         set -x
         #dryrun to get the list of files to be added
         rsync -n -a -i --ignore-existing --exclude='[.]git*' --exclude='.nfs*' --exclude='[.]*[.]sw[pon]' --exclude='[.]idea' --exclude=__pycache__ --exclude='*[.]site' --out-format="%n%L" $depot_dir/tpsup $site_dir/
      ))

      echo "$files" | egrep -v '/$'|while read f; 
      do
         if [[ $f =~ $pattern ]]; then
            # only touch the file if it doesn't exist
            cmd="tptouch $site_dir/$f"
            echo $cmd
            if [ $really_do = Y ]; then
               $cmd
            fi
         fi
      done
   elif [ $action = del -o $action = delete ]; then
      files=$( (
         set -x
         #dryrun to get the list of files to be added
         rsync -n -a -i --delete \
            --exclude='[.]git*' --exclude='.nfs*' --exclude='[.]*[.]sw[pon]' \
            --exclude='[.]idea' --exclude=__pycache__ --exclude='*[.]site' \
            --out-format="%n%L" $depot_dir/tpsup $site_dir/ \
            |grep ^deleting |awk '{print $2}'
      ))

      echo "$files" | egrep -v '/$'|while read f; 
      do
         if [[ $f =~ $pattern ]]; then
            # only remove the file, not the dir
            cmd="/bin/rm -f $site_dir/$f"
            echo $cmd
            if [ $really_do = Y ]; then
               $cmd
            fi
         fi
      done
   fi

   if [ $really_do = N ]; then
      echo ""
      echo "dryrun only. use '$prog $action $pattern yes' to really do."
      echo ""
   fi
else
   echo "unknown action='$action'"
   usage
fi
