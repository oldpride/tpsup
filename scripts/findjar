#!/bin/bash
   
prog=`basename $0`

usage () {
   cat <<EOF
usage:

   locate java code.

   - to use specific jar files
   $prog package_name jar1 jar2 ...

   - to use the CLASSPATH
   $prog package_name env

   -d dump the code. it does "javap my.class" to disassemble class file.
           $prog -d package_name env | grep function_name

   -h print header of the code
   -s save tmp dir for troubleshooting, default is no

examples:

   $prog FileFixPublisher env
   $prog FileFixPublisher *jar

   - test a jar file in CLASSPATH.
     often, we need to set up env before search.
     for example, github/antlr/examples/06_vistor_if_else has this code
        import org.antlr.v4.runtime.CharStreams;
        ... CharStreams.fromFileName("test.mu") ...
     to confirm formFileName was defined in CharStreams
        $ siteenv             # this loads antlrenv and javaenv functions
        $ antlrenv default    # this sets CLASSPATH to a single jar file.
        $ javaenv 11          # this sets java and jar executables path

        $ findjar org.antlr.v4.runtime.CharStreams env
          7710 Sun May 21 17:25:32 EDT 2023 org/antlr/v4/runtime/CharStreams.class
          found in /c/users/william/sitebase/java/lib/antlr-4.13.0-complete.jar

        $ findjar -d org.antlr.v4.runtime.CharStreams env |grep fromFileName
          public static org.antlr.v4.runtime.CharStream fromFileName(java.lang.String) ...
          public static org.antlr.v4.runtime.CharStream fromFileName(java.lang.String, ...

   - test a dir in CLASSPATH.
     $ cd sitebase/github/java/examples/01_package/bin
     $ unset CLASSPATH    # this effectively default CLASSPATH to "."
     $ findjar myprogram.utils env
       ./myprogram/utils
       ./myprogram/utils/Util.class

   - to explode a jar file
      mkdir junkdir
      cd junkdir
      jar -xvf found.jar

   - to extract a component from a jar file to stdout.  
      unzip -q -c /c/users/william/sitebase/java/lib/antlr-4.13.0-complete.jar \\
         org/antlr/v4/runtime/CharStreams.class
         -q    quiet
         -c    to stdout

EOF
   exit 1
}

if [ $# -lt 2 ]; then
   echo "wrong number of args"
   usage
fi

dump=N
header=N
save_tmp_dir=N
# where is java
export PATH=$PATH:/usr/local/bin:

while getopts hds o; do
   case "$o" in
      h) header=Y;;
      d) dump=Y;;
      s) save_tmp_dir=Y;;
     #x) exclude=$OPTARG;;
      *) echo "unknow switch '$o'"; usage;;
   esac
done

shift $((OPTIND-1))

pattern="$1"
shift

check_jar () {
   f=$1
   pattern=$2

   # jar structure is similar to tar structure.
   # therefore, jar command is similar to tar command
   #    $ jar -tvf project.jar
   #       0 Sun May 28 22:44:42 EDT 2023 META-INF/
   #      97 Sun May 28 22:44:42 EDT 2023 META-INF/MANIFEST.MF
   #      476 Sun May 28 21:21:52 EDT 2023 myprogram/Main.class
   #      687 Sun May 28 21:21:52 EDT 2023 myprogram/utils/Util.class
   #
   # can match by package name, connected by "."
   #    $ jar -tvf project.jar |grep myprogram.utils
   #      687 Sun May 28 21:21:52 EDT 2023 myprogram/utils/Util.class
   #
   # can also match using directory, connected by "/"
   #    $ jar -tvf project.jar |grep myprogram/utils
   #      687 Sun May 28 21:21:52 EDT 2023 myprogram/utils/Util.class

   jar -tvf $f |grep -si "$pattern" | while read line
   do
      echo ""
      echo "found in $f"
      echo "   $line"

      if [ $dump = Y -o $header = Y ]; then
         # 687 Sun May 28 21:21:52 EDT 2023 myprogram/utils/Util.class
         # get the last part
         path=`echo $line |sed -e 's:.* ::'`
         #echo $path
         tmpdir=`get_tmp /tmp findjar`

         [ -d $tmpdir ] || mkdir $tmpdir || exit 1

         oldpwd=`pwd`
         abspath=`readlink -f $f`
         cd $tmpdir
         jar -xvf $abspath $path
         # can also use:      unzip -q    $abspath $path
         #    in particular:  unzip -q -c $abspath $path
         #        -q    quiet
         #        -c    print to stdout

         if [ $header = Y ]; then
            echo ""
            javap $path
            echo ""
         fi

         if [ $dump = Y ]; then
            echo ""
            # javap - Disassembles one or more class files.
            #   -c  - prints disassembled code.
            javap -c $path
            echo ""
         fi

         if [ $save_tmp_dir = Y ]; then
            echo "class file is saved at: "
            readlink -f $path
         else
            /bin/rm -fr $tmpdir
         fi

         cd $oldpwd
      fi
   done
}

check_dir () {
   f=$1
   pattern=$2

   find $f -type f -ls |grep -si "$pattern" | while read line
   do
      echo ""
      echo "found in $f"
      echo "   $line"

      if [ $dump = Y -o $header = Y ]; then
         path=`echo $line |sed -e 's:.* ::'`

         if [ $header = Y ]; then
            echo ""
            javap $path
            echo ""
         fi

         if [ $dump = Y ]; then
            echo ""
            # javap - Disassembles one or more class files.
            #   -c  - prints disassembled code.
            javap -c $path
            echo ""
         fi
      fi
   done
}

if [ "$1" = "env" ]; then
   if [ "X$CLASSPATH" = "X" ]; then
      parts="."
   else
      parts=`echo $CLASSPATH|sed -e 's/:/ /g'`
   fi
else
   parts="$@"
fi

for f in `echo $parts`
do
   # https://medium.com/javarevisited/back-to-the-basics-of-java-part-1-classpath-47cf3f834ff
   # The classpath is simply a list of 
   #    - directories, 
   #    - JAR files, 
   #    - ZIP archives

   if [ -d $f ]; then
      #find $f -mount |egrep "$pattern" 
      check_dir $f "$pattern"
   elif [[ $f =~ jar$ ]]; then
      check_jar $f "$pattern"
   else
      echo "TODO: unknow type at file: $f"
   fi
done

exit 0;

# $ for i in *jar; do if jar -tvf $i | grep -Hsi FileFixPublisher;then echo $i;fi done
# (standard input): 4886 Sat Sep 21 14:25:30 EDT 2013 com/abc/fix/tools/FileFixPublisher.class
# fix-support-tools.jar
# (standard input): 4860 Mon Mar 19 13:08:10 EDT 2012 com/abc/fix/tools/FileFixPublisher.class
# fix-tools.jar
