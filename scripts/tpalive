#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use strict;
use Carp;
use POSIX qw/strftime/;

my $prog = $0; $prog =~ s:.*/::;

my $interval = 1800;

sub usage {
   my $real_tty = `tty`;

   my ($message) = @_;

   print "$message\n" if $message;

   print <<"END";
usage:

   $prog auto
   $prog /dev/pts/...

   -v              verbose mode.
   -i interval     default to $interval

   To keep the terminal alive otherwise it would be timed out after 3600 seconds of idle.
   The check interval is $interval seconds.

   When use 'auto', the script will automatically pick the current tty.

   The script will exits after the command shell process exits (after the next check interval).

examples:

   $prog auto
   $prog $real_tty

END

   exit 1;
}

my $verbose;

GetOptions(
   'v|verbose'    => \$verbose,
   'i|interval=s' => \$interval,
) || usage ("cannot parse command line: $!");

usage("wrong number of args") if !@ARGV;

my ($tty) = @ARGV;

my $real_tty = `tty 2>/dev/null`;
if (!$real_tty) {
   $verbose && print STDERR "$prog quit because we don't have a tty\n";
   exit 0;
}

chomp $real_tty;

if ($tty eq 'auto') {
   check_running_instance();

   $verbose && print STDERR "running $0 $real_tty in background\n";

   system("$0 -i $interval $real_tty");

   exit 0;
} else {
   if ($tty ne $real_tty) {
      print STDERR "the specified tty='$tty' is not the real tty '$real_tty'. aborted\n";
      exit 1;
   }

   check_running_instance();
}

my $child_pid = fork();

if ($child_pid) {
   # this is parent
      exit 0;
} elsif ($child_pid == 0) {
   # this is child

   my $hostname = `hostname`; chomp $hostname;
   my $id = `id`;

   my ($user) = ( $id =~ m:.+?\((.+?)\): );
   $user = 'unknown' if !$user;

   while (1) {
      # user1@host1:/proc/15411-> ps -ef |grep alive
      # user1 27203 16988 0 12:08:21 pts/11 0:00 /usr/xpg4/bin/grep alive
      # user1 15411 1235 0 11:08:29 ? 0:00 /usr/bin/perl /home/user1/tpsup/scripts/tpalive /dev/pts/4
      # user1 17227 1235 0 11:09:37 pts/11 0:00 /usr/bin/perl /home/user1/tpsup/scripts/tpalive /dev/pts/ll
      # user1@host1:/proc/15411-> ps -p 15411,17227 -o tty
      # TT
      # ?
      # pts/11

      my $current_tty = 'tty 2>/dev/null';

      if ( !$current_tty || $current_tty !~/\// ) {
         # grand-parent shell process already exited, so will I
         exit 0;
      }

      my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat($tty);
      my $now = time();

      my $mstring = strftime("%Y%m%d-%T", localtime($mtime));

      my $now_string = strftime("%Y%m%d-%T", localtime($now));

      if ($now - $mtime + $interval > 2*$interval -5 || $verbose ) {
         print STDERR "$now string we have to spit some message to keep this terminal alive. ",
                      "tty=$tty, stamp=$mstring, pid=$$, host=$hostname, user=$user, interval=$interval\n";
      }
      sleep $interval;
   }
}

exit 0;

###########################################################################
# subs
###########################################################################

sub check_running_instance {
   my $pattern = "$prog .*$real_tty";
   my $cmd = "/bin/ps -ef | egrep '$pattern' |grep -v grep";
   my @lines = `$cmd`;

   # user1 2635 15676 0 18:49:06 pts/5 0:00 vi tpalive
   for my $l (@lines) {
      my ($pid) = ($l =~ /^\s*\S+\s+(\S+)/);

      if ($pid != $$) {
         if ($verbose) {
            print "process pattern '$pattern' is already running:\n$l\nquit\n";
         }

         exit 0;
      }
   }
}
   
