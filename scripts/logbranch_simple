#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
$Data::Dumper::Sortkeys = 1;  # this sorts the Dumper output!
$Data::Dumper::Terse = 1;     # print without "$VAR1="

use Getopt::Long;
use Carp;
use TPSUP::UTIL qw(
   get_in_fh
   close_in_fh
);

my $separator = '--';

my $prog = $0; $prog =~ s:.*/::;

sub usage {
   my ($message) = @_;

   print "$message\n" if $message;

   print STDERR << "END";
usage:

   $prog -b pattern1--pattern2 log

   search a pattern and let it start a branch search

   -b pattern1--patern2
                           pattern1 is start-pattern; once matched, it starts a branch. 
                           pattern2 is continue-pattern; matches the rest file.

                           -b can be used multiple times.

   -m pattern              filter this pattern before start a main 

   -v                      verbose

   -s pattern_separator    default to '$separator'

example:

  # one -b
  $prog -b "received.*?message_id=(?<MSGID>.+?),--ERROR:.*?{{MSGID}}|{{MSGID}}.*?SUCCESS"\\
        logbranch_simple_test.log 

  # multiple -b
  $prog -b "received.*?message_id=(?<MSGID>.+?),--ERROR:.*?{{MSGID}}|{{MSGID}}.*?SUCCESS"\\
        -b "received.*?trade_message=(?<MSGID>.+?),--ERROR:.*?{{MSGID}}|{{MSGID}}.*?SUCCESS"\\
        logbranch_simple_test.log 

  # narrow down start-pattern using -m
  $prog -b "received.*?message_id=(?<MSGID>.+?),--ERROR:.*?{{MSGID}}|{{MSGID}}.*?SUCCESS"\\
        -m ORD001 logbranch_simple_test.log 

END

   exit 1;
}

my @branch_patterns;
my $match_pattern;
my $verbose = 0;

GetOptions(
   'b=s'          =>      \@branch_patterns,
   'm=s'          =>      \$match_pattern,
   's=s'          =>      \$separator,
   'v+'           =>      \$verbose,  # each -v will increment the verbose level

) || usage ("cannot parse command line: $!");

usage("wrong number of args") if !@ARGV;
usage("at least onne -b must be specified") if !@branch_patterns;

my @compiled_branch_patterns;
for my $b (@branch_patterns) {
   # break the string
   #    "received.*?message_id=(?<MSGID>.+?),--ERROR:.*?{{MSGID}}|{{MSGID}}.*?SUCCESS"
   # into two patterns
   #    "received.*?message_id=(?<MSGID>.+?),"
   #    "ERROR:.*?{{MSGID}}|{{MSGID}}.*?SUCCESS"
   my ($p1, $p2) = split /$separator/, $b;

   my $r = [ $p1, $p2, qr/$p1/, [] ];
   # 1st element:    start-pattern
   # 2st element: continue-pattern
   # 3rd element: compiled start pattern
   # 4th element: branches.
   #              each branch will have [ continue-pattern, compiled continue-pattern].
   #              initially no branches, therefore empty array []

   push @compiled_branch_patterns, $r;
}

my $match_compiled;
if ($match_pattern) {
   $match_compiled = qr/$match_pattern/;
}

for my $file (@ARGV) {
   my $fh = get_in_fh($file);

   while (my $line = <$fh>) {
      print "checking input: $line" if $verbose > 1;

      for my $b (@compiled_branch_patterns) {
         #  $b->[3] contains the branches.
         for my $c (@{$b->[3]}) {
            # $c->[0] has the original contiune-pattern
            # $c->[1] has the compiled contiune-pattern
            print "test continue-pattern=$c->[0]\n"  if $verbose > 1;
            if ($line =~ /$c->[1]/) {
               print $line;
            }
         }
      }

      if ($match_compiled) {
         if ($line !~ /$match_compiled/) {
            next;
         }
      }

      # check for new branches
      for my $b (@compiled_branch_patterns) {
         if ($line =~ /$b->[2]/) {
            my %matched = %+;

            print $line;

            $verbose && print "matched '$b->[0]', matched=", Dumper(\%matched);

            my $continue_pattern = $b->[1];

            for my $k (keys %matched) {
               $continue_pattern =~ s/\{\{$k\}\}/$matched{$k}/g;
            }

            $verbose && 
               print "continue_pattern '$b->[1]' resolved to '$continue_pattern'\n";

            # build a new branch
            my $b2 = [$continue_pattern, qr/$continue_pattern/];

            # add the branch to branches
            push @{$b->[3]}, $b2;
         }
      }
   }

   close_in_fh($fh);
}


exit 0;
