#!/bin/bash

prog=$(basename "$0")

usage () {
   cat >&2 <<END
usage:
   $prog tty

   -v        verbose mode

examples:

   # linux
   $prog /dev/pts/0
   $prog pts/0

   # cygwin
   $prog /dev/pty0
   $prog pty0

END
   exit 1
}

verbose=N

while getopts "v" o; do
   case $o in
      v)
         verbose=Y
         ;;
      *) echo "Error: unknown option '-$o'" >&2
         usage
         ;;
   esac
done
shift $((OPTIND - 1))

if [ $# -ne 1 ]; then
   echo "Error: wrong number of arguments" >&2
   usage
fi

tty="$1"

full_tty=""
short_tty=""

if [[ $tty =~ ^/dev/ ]]; then
   full_tty="$tty"
   short_tty="${tty#/dev/}"
else
   full_tty="/dev/$tty"
   short_tty="$tty"
fi

# find the pid of the mintty process that is using this tty
# note: cygwin's 'ps' comamnd does not support -t option. so we have to use "ps -ef"
# tian@tianpc2:/cygdrive/c/Users/tian$ ps -ef |grep pty0
#  tian    1068    1067 pty0       Jun 12 -bash
#  tian    2392    1068 pty0     17:10:28 ps -ef
#  tian    2393    1068 pty0     17:10:28 /usr/bin/grep

# the bash can be either: -bash or /usr/bin/bash.
# the command position can be either 6 or 7.
ps_output=$(ps -ef)
[ $verbose = Y ] && echo >&2 "ps_output=$ps_output"
cmd='echo "$ps_output" | awk "{ if (\$4 == \"'$short_tty'\" && (\$6 ~ /^-bash|^.usr.bin.bash/ || \$7 ~ /^-bash|^.usr.bin.bash/)) print \$2 }" | head -n 1'
[ $verbose = Y ] && echo >&2 "cmd=$cmd"
# eval "$cmd"
pids=$(eval "$cmd")
pid_count=$(echo "$pids" | wc -w)
[ $verbose = Y ] && echo >&2 "pid_count=$pid_count pids=$pids"

# if we found more than one pid, we will run the command again
# we will pick the pid that showed up twice. The other pid is the temporary one.

if [ $pid_count -eq 0 ]; then
   [ $verbose = Y ] && echo >&2 "Error: no process found for tty '$tty'"
   exit 1
elif [ $pid_count -eq 1 ]; then
   echo $pids
   exit 0
else
   [ $verbose = Y ] && echo >&2 "Warning: found $pid_count processes for tty '$tty'. we need to run the command again to filter out the temporary pid."
   ps_output=$(ps -ef)
   [ $verbose = Y ] && echo >&2 "ps_output=$ps_output"
   pids2=$(eval "$cmd")
   pid_count2=$(echo "$pids2" | wc -w)
   if [ $pid_count2 -eq 1 ]; then
      echo $pids2
      exit 0
   elif [ $pid_count2 -eq 0 ]; then
      [ $verbose = Y ] && echo >&2 "Error: no process found for tty '$tty' after filtering"
      exit 1
   else
      # now both pids and pids2 have more than one pid.
      [ $verbose = Y ] && echo >&2 "pid_count2=$pid_count2 pids2=$pids2"

      # use an associate array to record the occurrence of each pid
      declare -A seen_pid
      for pid in $pids; 
      do
         seen_pid[$pid]=1
      done

      for pid in $pids2;
      do
         # if the pid is already seen, we will print it
         if [[ -n ${seen_pid[$pid]} ]]; then
            echo $pid
            exit 0
         else
            continue
         fi
      done
      [ $verbose = Y ] && echo >&2 "Error: no process found for tty '$tty' after filtering again"
      exit 1      
   fi
fi
