#!/bin/bash

prog=`basename $0`

usage () {
   cat <<END
usage:

   $prog match_pattern file_pattern

   -d      debug mode
   
example:

   $prog wdkey  *cfg tpslnm*
   $prog frame  *cfg tpslnm*

END
   exit 1
}

debug=N

while getopts d o;
do
   case "$o" in
      #b) loginshell="";;
      d) debug=Y;;
      #f) font="-fa Monospace -fs $OPTARG";;
      *) echo "unknow switch '$o'"; usage;;
   esac
done

shift $((OPTIND-1))

if [ $# -lt 2 ]; then
   echo "wrong number of args"
   usage
fi

match_pattern="$1"
shift

echo "egrep -i \"$match_pattern\" ..."
echo ""

OUTPUT=`egrep -i "$match_pattern" "$@"`
echo "$OUTPUT"

if [ "X$OUTPUT" = "X" ]; then
   echo ""
   echo "nothing matched"
   echo ""
   exit 0
fi

echo ""
echo ""

echo "edit them?"
read answer

# According to man bash, the =~ operator supports "extended regular expressions" 
# as defined in 
#    man -s 3 regex.
# man3 regex says it supports the POSIX standard and refers the reader to
#    man -s 7 regex.
# The POSIX standard supports
#   [:space:] as the character class for whitespace.
#   \b is word boundary

# for case-insensitive regex, convert case: ${var,,}} is lowercase, ${var^^}} is upperrcase

# either of the following 2 works. note: when use word boundry \b, we must use a variable
#if [[ ${answer,,} =~ ^[[:space:]]*n ]]; then
regex_var='\bn'
if [[ ${answer,,} =~ $regex_var ]]; then
   echo ""
   echo "Answer is "$answer". quit"
   echo ""
else
   vi `egrep -l -i "$match_pattern" "$@"`
fi




