#!/usr/bin/perl

use strict;
use Data::Dumper;
use Getopt::Long;
use Carp;
use TPSUP::UTIL qw(get_in_fh);

my $prog = $0; $prog =~ s:.*/::;
my $dir = $0; $dir =~ s:[^/]+$::;

my $last_seconds = 3600;

my $exclude_pattern = undef;

sub usage {
   my ($msg) = @_;

   print STDERR "$msg\n" if $msg;

   print STDERR << "EOF";
usage:

   $prog file
   $prog -

description:
   
   convert perl to python. working in progress

   -v                     verbose mode

   after convert and copy the code into pycharm, using Ctrl+Alt+Shift+L to reformat
 
example:

   $prog  perl2python_test.txt

EOF

   exit 1;
}

my $verbose;

 GetOptions(
   "v"              => \$verbose,
) or usage("Could not parse command line: $!");

usage("wrong number of args") if !@ARGV;

for my $f (@ARGV) {
   print STDERR "\nfile=$f\n" if $verbose;

   my $ifh = get_in_fh($f);
   while (my $line = <$ifh>) {
      # convert
      #    key => 'value'
      # to
      #    'key' : 'value'

      $line =~ s/([a-zA-Z0-9_]*)(\s*)=>(\s*)/'$1'$2:$3/g;

      # undef => None
      $line =~ s/\bundef\b/None/g;

      # "...$known->{$key}..."  =>  f"...{known[key]}..."
      $line =~ s/"([^"]*)\$([a-zA-Z0-0_]+)(->)?\{\$([a-zA-Z0-0_ ]+)\}([^"]*)"/f"$1\{$2\[$4\]\}$5"/g;

      # "...$known->{RESOLUTIONCODE}..."  =>  f"...{known['RESOLUTIONCODE']}..."
      # "...$known{RESOLUTIONCODE}..."    =>  f"...{known['RESOLUTIONCODE']}..."
      $line =~ s/"([^"]*)\$([a-zA-Z0-0_]+)(->)?\{[']?[\$]?([a-zA-Z0-0_ ]+)[']?\}([^"]*)"/f"$1\{$2\['$4'\]\}$5"/g;


      # "...$known->[5]..."  =>  f"...{known[5]}..."
      # "...$known[5]..."    =>  f"...{known[5]}..."
      $line =~ s/"([^"]*)\$([a-zA-Z0-0_]+)(->)?\[([0-9]+)\]([^"]*)"/f"$1\{$2\[$4\]\}$5"/g;

      # "...$known[$i]..."   =>  f"...{known[i]}..."
      $line =~ s/"([^"]*)\$([a-zA-Z0-0_]+)(->)?\[\$([a-zA-Z0-0_]+)\]([^"]*)"/f"$1\{$2\[$4\]\}$5"/g;

      # convert 
      #    ... <<'END'
      #    ...
      #    END
      # to
      #     ... '''
      # ...
      # '''
      $line =~ s/<<\s*'(EOF|END)'/'''/;     # 'END' =>  '''
      $line =~ s/<<\s*"(EOF|END)"/f'''/;    # "END" => f''' 
      $line =~ s/^(END|EOF)$/'''/;

      print $line; 
   }
}

exit 0;

#################################################################################
# subs
#################################################################################

