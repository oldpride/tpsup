#!/usr/bin/perl

use strict;
use Data::Dumper;
use Getopt::Long;
use Carp;
use TPSUP::UTIL qw(get_user);

my $prog = $0;
$prog =~ s:.*/::;
my $dir = $0;
$dir =~ s:[^/]+$::;

my $username   = get_user();
my $store_file = "/tmp/$prog.$username.txt";

my $exclude_pattern;
my $max_depth        = 20;
my $expiration_hours = 120;    # hours

my @du_exclude_dirs = ( '.zfs', '.snapshot' );
my $du              = "du";
for my $dir (@du_exclude_dirs) {
   $du .= " --exclude=$dir";
}

sub usage {
   my ($msg) = @_;

   print STDERR "$msg\n" if $msg;

   print STDERR << "EOF";
usage:

   $prog mount_point

description:
   
   find big disk usage under mount_point

   -v                     verbose mode

   -x exclude_pattern     Perl RegEx style, exclude.

   -reset                 reset du store

   -e expiration_hours    in hours. default to $expiration_hours

   -f store_file          default to $store_file

   when 'du', 'du' excludes these dirs: @du_exclude_dirs

examples:

   $prog .

EOF

   # -k count in kilobytes

   exit 1;
}

my ( $verbose, $unit, $reset );

GetOptions(
   "x=s"   => \$exclude_pattern,
   "v"     => \$verbose,
   "reset" => \$reset,
   "e=s"   => \$expiration_hours,

   # 'k'   => \$k,
) or usage("Could not parse command line: $!");

usage("wrong number of args") if @ARGV != 1;

my $base = $ARGV[0];
my $abs  = `cd $base; pwd`;
chomp $abs;
$base = $abs;

my $now_sec        = time();
my $expiration_sec = $expiration_hours * 3600;
my $cutoff_sec     = $now_sec - $expiration_sec;

my $exclude_compiled = $exclude_pattern ? qr/$exclude_pattern/ : undef;

my $top           = 2;
my $biggest_ratio = 0.5;
my $size_by_path;
# my $unit_divsor = $k ? 1024 : 1;
# my $unit_name   = $k ? 'k'  : 'byte';
# my $unit_flag   = $k ? '-k' : '';

# get df usage
my $os = 'uname -a';

my $cmd = $os =~ /^Linux/ ? "df -kP $base" : "df -k $base";

my @DF = `$cmd`;

if ( !$DF[1] ) {
   croak "cmd='$cmd' failed" . return undef;
}

chomp @DF;

# Filesystem     1K-blocks      Used Available Use% Mounted on
# C:             498687252 238734208 259953044  48% /cygdrive/c

my @a = split /\s+/, $DF[1];

my $used        = $a[2];
my $mount_point = $a[5];

$verbose && print "mount_point=$mount_point, used=${used}k\n";

my $print_format = '%11sk %s %s' . "\n";    # right-align size %13s, left-align path %-13s

# my @todos = ( [ $base, $used, 0 ] );
my @todos;
if ( $base eq $mount_point ) {
   @todos = ( [ $base, $used, 0 ] );
} else {
   my $size = du_1_node($base);
   @todos = ( [ $base, $size, 0 ] );
}

while (@todos) {
   my $todo = shift @todos;
   my ( $path, $size, $level ) = @$todo;
   printf $print_format, $size, $path, "level=$level";

   if ( -d $path ) {
      my @fulls;
      opendir( DIR, $path ) or die "Cannot open $path\n";
      my @shorts = readdir(DIR);
      closedir(DIR);

      for my $short (@shorts) {
         next if $short eq '.' or $short eq '..' or $short eq '.zfs' or $short eq '.snapshot';
         next if $exclude_compiled and $short =~ $exclude_compiled;
         push @fulls, "$path/$short";
      }

      my @big_ones = find_the_big_ones( \@fulls, { parent_size => $size } );

      if ( $level < $max_depth ) {
         push @todos, map { [ $_, $size_by_path->{$_}, $level + 1 ] } @big_ones;
      } else {
         for my $path (@big_ones) {
            printf $print_format, $size_by_path->{$path}, $path, "reached max_depth=$max_depth";
         }
      }
   }
}

exit 0;

#############################################
# subroutines
#############################################
sub find_the_big_ones {
   my ( $paths, $opt ) = @_;

   my $parent_size = $opt->{parent_size};
   my $biggest_size;
   if ($parent_size) {
      $biggest_size = $parent_size * $biggest_ratio;
   }

   for my $path (@$paths) {
      my $size;
      if ( -d $path ) {
         $size = du_1_node($path);
         $verbose && print "dir=$path, size=${size}k\n";
      } elsif ( -f $path ) {
         $size = -s $path;
         $size = int( $size / 1024 );
         $verbose && print "file=$path, size=${size}k\n";
      } else {
         $verbose && print "path=$path is not a file or directory\n";
         next;
      }
      $size_by_path->{$path} = $size;
      if ( $size > $biggest_size ) {
         return ($path);
      }
   }

   my @sorted = sort { $size_by_path->{$b} <=> $size_by_path->{$a} } @$paths;

   if ( scalar(@sorted) > $top ) {
      # perl slice will insert undef if ending index is beyond
      return @sorted[ 0 .. $top ];
   } else {
      return @sorted;
   }
}

my $du_by_abs = {};
my $du_store_ofh;

sub du_1_node {
   my ( $abs, $opt ) = @_;

   if ( !$du_store_ofh ) {
      $du_store_ofh = init_du_store($opt);    # this also init $du_by_abs
   }

   if ( exists $du_by_abs->{$abs} ) {
      my $size = $du_by_abs->{$abs};
      $verbose && print "found du in store file: $size $abs\n";
      return $size;
   }

   my $cmd = "$du -sk $abs";
   $verbose && print "cmd=$cmd\n";

   my $output = `$cmd`;
   return undef if $?;

   #    $ du -sk Linux
   # 12      Linux
   chomp $output;
   my ( $size, $path2 ) = split /\s+/, $output, 2;
   $du_by_abs->{$abs} = $size;
   print $du_store_ofh "$size $now_sec $abs\n";

   return $size;
}

sub init_du_store {
   my ($opt) = @_;

   my @to_keep;
   my $file_need_change;

   if ( -f $store_file && !$reset ) {
      open my $ifh, "<$store_file" or croak "cannot read $store_file: $!";
      while ( my $line = <$ifh> ) {
         chomp $line;
         next if !$line;
         my ( $size, $sec_stamp, $abs ) = split /\s+/, $line, 3;
         if ( $sec_stamp < $cutoff_sec ) {
            $verbose && print "skip $abs, old_time=$sec_stamp < cutoff_time=$cutoff_sec\n";
            $file_need_change++;
            next;
         }
         $du_by_abs->{$abs} = $size;
         push @to_keep, $line;
      }
      close $ifh;
   }

   my $ofh;
   if ( $file_need_change or $reset ) {
      $verbose && print "rewrite store file: $store_file\n";
      open $ofh, ">$store_file" or croak "cannot write to $store_file: $!";
      print $ofh "$_\n" for @to_keep;
   } else {
      $verbose && print "append to store file: $store_file\n";
      open $ofh, ">>$store_file" or croak "cannot append to $store_file: $!";
   }

   return $ofh;
}
