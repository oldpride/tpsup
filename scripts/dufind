#!/usr/bin/perl

use strict;
use Data::Dumper;
use Getopt::Long;
use Carp;
use TPSUP::UTIL qw(get_user top_array);
# import basename() from File::Basename
use File::Basename qw(basename dirname);
use TPSUP::PRINT   qw(commify);

my $prog = basename($0);
$prog =~ s:[.].*::;    # dufind.new =>> dufind

my $dir = $0;
$dir =~ s:[^/]+$::;

my $username = get_user();
my $yyyymmdd = `date +%Y%m%d`;
chomp $yyyymmdd;

my $histpref = "/tmp/$prog.$username";
my $histfile = "$histpref.$yyyymmdd.txt";

my $exclude_pattern;
my $max_depth = 10;

my $expiration = "12h";    # h: hours, m: minutes, s: seconds
# as we use daily histfile file, expiration hour should be less than 24

# stop searching other items under a folder if we already searched this percent of parent
my $stop_percent = 70;

my @no_du_dirs = (
   '.zfs',         # cannot du. will cause dead loop
   '.snapshot',    # cannot count this into du
);
my $du_cmd = "du";
my $no_du;
for my $dir (@no_du_dirs) {
   $du_cmd .= " --exclude=$dir";
   $no_du->{$dir} = 1;
}

# cannot or no need to drill into these dirs
# my $no_drill_in_pattern  = '^[._]';
my $no_drill_in_compiled = qr/^[._-]/;

# my @no_drill_in_dirs = ( '.', '..', '.zfs', '.snapshot', '.git', '.vscode', '__pycache__', 'log', 'logs' );
my @no_drill_in_dirs = ( 'log', 'logs', 'tmp' );
my $no_drill_in;
for my $dir (@no_drill_in_dirs) {
   $no_drill_in->{$dir} = 1;
}

sub usage {
   my ($msg) = @_;

   print STDERR "$msg\n" if $msg;

   print STDERR << "EOF";
usage:

   $prog base1 base2 ...

description:
   
   find big disk usage under mount_point

   -v                     verbose mode

   -x exclude_pattern     Perl RegEx style, exclude.

   -stop percent          stop checking the current folder further after
                          this percent of size is investigated.
                          default to $stop_percent

   -reset pattern         reset du histfile's files that match this pattern.
                          default to no reset.
                          to reset all, use 'all' or '.*'.

   -e expiration_time    eg, 1h, 10m, 15s. default to $expiration
                         h: hours, m: minutes, s: seconds.

   -f histfile          default to $histfile

   -depth int           max depth (level) to drill in. default to $max_depth.
                        command line level is 0.

   -histlist            list available history files
   -hl
   
   -histcomp            compare with historical size
   -hc
   
   -histdays yyyymmdd1,yyyymmdd2     compare these two days of history. format: yyyymmdd1,yyyymmdd2. 
   -hd                  default to last two days.
   


   The following dirs are not drilled in: @no_drill_in_dirs

   When 'du', 'du' excludes these dirs: @no_du_dirs.

examples:

   $prog .

EOF

   # -k count in kilobytes

   exit 1;
}

my ( $verbose, $unit, $reset, $histlist, $histcomp, $histdays );

GetOptions(
   "x=s"        => \$exclude_pattern,
   "v"          => \$verbose,
   "reset=s"    => \$reset,
   "e=s"        => \$expiration,
   "stop=s"     => \$stop_percent,
   "depth=s"    => \$max_depth,
   "histlist"   => \$histlist,
   "hl"         => \$histlist,
   "histcomp"   => \$histcomp,
   "hc"         => \$histcomp,
   "histdays=s" => \$histdays,
   "hd=s"       => \$histdays,

) or usage("Could not parse command line: $!");

if ($histlist) {
   system("ls -1l $histpref.*.txt");
   exit 0;
}

usage("wrong number of args") if !@ARGV;

my $cache_by_path;
my $top = 2;
my $now_sec;
my $cutoff_sec;

for my $base (@ARGV) {
   my $abs = `cd $base; pwd`;
   chomp $abs;
   $base = $abs;

   if ($histcomp) {
      # compare historical files to see where the big change came from
      print "\n";

      # my $threshold_percent = 10;
      my $threshold_size = 1 * 1024;    # unit is k, ie, 1024

      my $hist_format = '%11sk %s %s' . "\n";    # right-align size %13s, left-align path %-13s

      my $du_by_yyyymmdd_abs = get_du_history($base);

      my @days = sort( keys %$du_by_yyyymmdd_abs );

      my $day1 = $days[0];
      my $day2 = $days[1];

      print "compare base=$base historical sizes between $day1 and $day2\n";

      my $du1 = $du_by_yyyymmdd_abs->{$day1};
      my $du2 = $du_by_yyyymmdd_abs->{$day2};

      # print "du1=", Dumper($du1);
      # print "du2=", Dumper($du2);

      for my $abs ( sort( keys %$du2 ) ) {
         # print "abs=$abs\n";

         my ( $size2, $type2 ) = @{ $du2->{$abs} };

         my $diff;
         if ( $du1->{$abs} ) {
            my ( $size1, $type1 ) = @{ $du1->{$abs} };
            if ( $type1 ne $type2 ) {
               print "INFO: file type changed from $type1 to $type2, $abs\n";
            }
            $diff = $size2 - $size1;
         } else {
            $diff = $size2;
         }

         if ( abs($diff) > $threshold_size ) {
            printf $hist_format, commify($diff), $type2, $abs;
            next;
         }

         # # get parent
         # # my $parent2 = $abs;
         # # $parent2 =~ s:/[^/]+$::;    # dirname
         # my $parent2    = dirname($abs);
         # my $parent2_du = $du2->{$parent2};
         # my $parent1_du = $du1->{$parent2};
         # if ($parent1_du) {
         #    # find the max size of parents
         #    my ( $parent1_size, $parent1_type ) = @$parent1_du;
         #    my ( $parent2_size, $parent2_type ) = @$parent2_du;

         #    my $parent_max   = $parent1_size > $parent2_size ? $parent1_size : $parent2_size;
         #    my $diff_percent = 100 * int( 1.0 * abs($diff) / $parent_max );
         #    print "parent_max=$parent_max, diff_percent=$diff_percent, $abs\n";
         #    if ( $diff_percent > $threshold_percent ) {
         #       print $hist_format, $diff, $abs;
         #    }
         # }
      }

      exit 0;
   }

   my $expiration_sec;
   if ( $expiration =~ /^(\d+)([hms])$/ ) {
      my $num  = $1;
      my $unit = $2;

      if ( $unit eq 'h' ) {
         $expiration_sec = $num * 3600;
      } elsif ( $unit eq 'm' ) {
         $expiration_sec = $num * 60;
      } elsif ( $unit eq 's' ) {
         $expiration_sec = $num;
      } else {
         usage("wrong expiration unit=$unit");
      }
   } else {
      usage("wrong expiration format=$expiration");
   }

   $now_sec    = time();
   $cutoff_sec = $now_sec - $expiration_sec;

   my $exclude_compiled = $exclude_pattern ? qr/$exclude_pattern/ : undef;

   # my $unit_divsor = $k ? 1024 : 1;
   # my $unit_name   = $k ? 'k'  : 'byte';
   # my $unit_flag   = $k ? '-k' : '';

   # get df usage
   my $os = 'uname -a';

   my $cmd = $os =~ /^Linux/ ? "df -kP $base" : "df -k $base";

   my @DF = `$cmd`;

   if ( !$DF[1] ) {
      croak "cmd='$cmd' failed" . return undef;
   }

   chomp @DF;

   # Filesystem     1K-blocks      Used Available Use% Mounted on
   # C:             498687252 238734208 259953044  48% /cygdrive/c

   my @a = split /\s+/, $DF[1];

   my $used        = $a[2];
   my $mount_point = $a[5];

   print "mount_point=$mount_point, used=${used}k\n";

   # to protect against cross over mount points, we use 'find' command to make sure
   # that we stay within the same mount point.
   # mount points is normally near root level, therefore, we only drill in 2 levels
   my $find_depth = $max_depth > 2 ? 2 : $max_depth;

   # my @find_prune_dirs   = ( ".zfs", ".snapshot", ".git", ".vscode", "__pycache__" );
   # it is better to prune all hidden dirs (and files)
   # find . -name .[^.]\* -prune  -o -ls
   my @find_prune_dirs = ( '.[^.]\*', '__pycache__' );

   my $find_prune_clause = "-name " . join( " -o -name ", @find_prune_dirs );
   my $find_cmd = "find $base -mount -maxdepth $find_depth \\( $find_prune_clause \\) -print -prune -o -type d -print";
   $verbose && print "find_cmd=$find_cmd\n";
   my @find_dirs = `$find_cmd`;

   $verbose && print "dirs within this mount =\n @find_dirs\n\n";
   chomp @find_dirs;

   my $within_mount_point = {};
   for my $dir (@find_dirs) {
      $within_mount_point->{$dir} = 1;
   }

   my $print_format = '%13sk %s %s %s' . "\n";    # right-align size %13s, left-align path %-13s

   # my @todos = ( [ $base, $used, 0 ] );
   my @todos;
   if ( $base eq $mount_point ) {
      @todos = ( [ $base, $used, 'd', 0 ] );
   } else {
      my ( $size, $type ) = du_1_node($base);
      @todos = ( [ $base, $size, $type, 0 ] );
   }

   # this is a breadth first search.
   # to speed up search:

   #    1. we cache the result of 'du' command.
   #    2. we stop searching further if we already found 70% of the parent folder.
   #    3. we stop searching further if we reached the max_depth.
   #    4. we skip some dirs that we know we don't want to drill in.
   #    5. we skip some dirs that we know we don't want to 'du'.
   # note:
   #    if we run this script again, the script will still search again the searched folders.
   #    But we won't run 'du' command again for the same folder.
   # The reason that we search again is for
   #    1. to find the new files
   #    2. to be able to change the stop_percent and max_depth on the fly.
   #    3. in case a previus run failed in the middle.
   while (@todos) {
      my $todo = shift @todos;
      my ( $path, $size, $type, $level ) = @$todo;
      print "\n";

      my $short2 = basename($path);
      if ( $type eq 'd' ) {
         if ( $no_drill_in->{$short2} || $short2 =~ $no_drill_in_compiled ) {
            if ( $level == 0 || $verbose ) {
               # we only print no-drill-in paths on level 0;
               printf $print_format, commify($size), $type, $path, "level=$level, no drill in";
            }
            next;
         }
         printf $print_format, commify($size), $type, $path, "level=$level";

         my @fulls;
         opendir( DIR, $path ) or die "Cannot open $path\n";
         my @shorts = readdir(DIR);
         closedir(DIR);

         for my $short (@shorts) {
            next if $short eq '.' or $short eq '..' or $no_du->{$short};

            my $full = "$path/$short";    # full path is not necessarily absolute path
            if ($exclude_compiled) {
               if ( $short =~ $exclude_compiled ) {
                  $verbose && print "skip $short, exclude_pattern=$exclude_pattern\n";
                  next;
               }
               if ( $full =~ $exclude_compiled ) {
                  $verbose && print "skip $full, exclude_pattern=$exclude_pattern\n";
                  next;
               }
            }
            if ( -d $full && $level < $find_depth && !$within_mount_point->{$full} ) {
               print "skip $full, not within the same mount point\n";
               next;
            }

            push @fulls, $full;
         }

         my @big_ones = find_the_big_ones( \@fulls, { parent_size => $size } );
         for my $path (@big_ones) {
            my ( $size, $type ) = @{ $cache_by_path->{$path} };
            my $next_level = $level + 1;
            printf $print_format, commify($size), $type, $path, "level=$next_level";
         }

         if ( $level < $max_depth ) {
            # only dirs with big size are pushed into @todos
            my $min_dir_size = 1024;    # 1M
            for my $path (@big_ones) {
               my ( $size, $type ) = @{ $cache_by_path->{$path} };
               # push @todos, [ $path, $size, $type, $level + 1 ] if $type eq 'd' && $size > $min_dir_size;
               if ( $type eq 'd' ) {
                  if ( $size > $min_dir_size ) {
                     push @todos, [ $path, $size, $type, $level + 1 ];
                  } elsif ($verbose) {
                     print "skip $path because size=$size k < min_dir_size=$min_dir_size k\n";
                  }
               }
            }
         }
      } else {
         # this is file: $type eq 'f'
         printf $print_format, commify($size), $type, $path, "level=$level";
      }
   }
}

exit 0;

#############################################
# subroutines
#############################################
sub find_the_big_ones {
   my ( $paths, $opt ) = @_;

   my $parent_size = $opt->{parent_size};
   my $stop_size;
   if ($parent_size) {
      $stop_size = $parent_size * $stop_percent;
   }

   my $sub_total_size = 0;
   for my $path (@$paths) {
      my ( $size, $type ) = du_1_node($path);    # du_1_node() will store result into file.

      next if !defined $size;

      $cache_by_path->{$path} = [ $size, $type ];
      $sub_total_size += $size;
      if ( $sub_total_size > $stop_size ) {
         last;
      }
   }

   # somme $cache_by_path->{} may not be defined. but as we only pick the biggest ones, it should be ok.
   my @sized_paths = grep { exists( $cache_by_path->{$_} ) } @$paths;

   # $b is before $a because we want to sort in reverse order
   my @sorted = sort { $cache_by_path->{$b}->[0] <=> $cache_by_path->{$a}->[0] } @sized_paths;

   # perl slice will insert undef if ending index is beyond
   return @{ top_array( \@sorted, $top ) };
}

my $histfile_ofh;

sub du_1_node {
   my ( $abs, $opt ) = @_;

   # du command is slow, so we cache the result to speed up.

   if ( !$histfile_ofh ) {
      $histfile_ofh = init_histfile($opt);    # this also init $cache_by_path
   }

   my $histfile_format = '%s %10s %10s %s' . "\n";    # right-align size %13s, left-align path %-13s

   if ( -d $abs ) {
      if ( exists $cache_by_path->{$abs} ) {
         my ( $size, $type ) = @{ $cache_by_path->{$abs} };
         $verbose && print "found du in histfile file: $size $type $abs\n";

         if ( $type eq 'd' ) {
            return ( $size, 'd' );
         } else {
            print "INFO: $abs was a file but now is a dir. will rerun 'du'\n";
         }
      }

      my $cmd = "$du_cmd -sk $abs";
      $verbose && print "cmd=$cmd\n";

      my $output = `$cmd`;
      return () if $?;

      #    $ du -sk Linux
      # 12      Linux
      chomp $output;
      my ( $size, $path2 ) = split /\s+/, $output, 2;
      $cache_by_path->{$abs} = [ $size, 'd' ];
      printf $histfile_ofh $histfile_format, 'd', $size, $now_sec, $abs;
      return ( $size, 'd' );
   } elsif ( -f $abs ) {
      my $size = -s $abs;
      $size = int( $size / 1024 );
      $cache_by_path->{$abs} = [ $size, 'f' ];
      if ( $size > 1024 ) {
         # only cache big file's size - not for speed, but for comparing history.
         printf $histfile_ofh $histfile_format, 'f', $size, $now_sec, $abs;
      }
      return ( $size, 'f' );
   } else {
      $verbose && print "path=$abs is not a file or directory\n";
      return ();
   }
}

sub init_histfile {
   my ($opt) = @_;

   my @to_keep;

   my $reset_compiled;
   if ( $reset && $reset ne 'all' ) {
      $reset_compiled = qr/$reset/;
   }

   if ( -f $histfile && ( !$reset or $reset ne 'all' ) ) {
      open my $ifh, "<$histfile" or croak "cannot read $histfile: $!";
      while ( my $line = <$ifh> ) {
         chomp $line;
         next if !$line;

         if ($reset_compiled) {
            if ( $line =~ $reset_compiled ) {
               $verbose && print "reset pattern matched $line in histfile, will refresh\n";
               next;
            }
         }

         my ( $type, $size, $sec_stamp, $abs ) = split /\s+/, $line, 4;
         if ( $sec_stamp < $cutoff_sec ) {
            $verbose && print "skip $abs, old_time=$sec_stamp < cutoff_time=$cutoff_sec\n";
            next;
         }
         $cache_by_path->{$abs} = [ $size, $type ];
         push @to_keep, $line;
      }
      close $ifh;
   }

   open my $ofh, ">$histfile" or croak "cannot write to $histfile: $!";
   print $ofh "$_\n" for @to_keep;

   return $ofh;
}

sub get_du_history {
   my ( $abs_base, $opt ) = @_;

   my @days;

   if ($histdays) {
      @days = split /,/, $histdays;

      if ( @days != 2 ) {
         usage("wrong number of days in -histdays=$histdays");
      }
   } else {
      my $cmd = "ls -1 $histpref.*.txt";

      my @files = `$cmd`;

      if ($?) {
         die "cmd=$cmd failed\n";
      }

      if ( @files < 2 ) {
         print "files:\n@files";
         print "ERROR: not enough files to compare history\n";
         exit 1;
      }

      # pick the last twe files
      for my $i ( ( -2, -1 ) ) {
         my $f   = $files[$i];
         my @a   = split /[.]/, $f;
         my $day = $a[2];
         push @days, $day;
      }
   }

   # make sure days are in yyyymmdd format
   for my $d (@days) {
      if ( $d !~ /^(19|20)\d{6}$/ ) {
         die "day='$d' is not in 'yyyymmdd' format\n";
      }
   }

   my $du_by_yyyymmdd_abs = {};

   # length of the abs_base
   my $base_len = length($abs_base);

   for my $yyyymmdd (@days) {
      my $f = "$histpref.$yyyymmdd.txt";

      die "file=$f not found\n" if !-f $f;

      open my $ifh, "<$f" or die "cannot read $f: $!";

      my $r = {};
      while ( my $line = <$ifh> ) {
         chomp $line;
         next if !$line;

         my ( $type, $size, $sec_stamp, $abs ) = split /\s+/, $line, 4;

         # skip if $abs not starting with $abs_base
         if ( substr( $abs, 0, $base_len ) ne $abs_base ) {
            $verbose && print "skip $abs, not under $abs_base\n";
            next;
         }

         $r->{$abs} = [ $size, $type ];
      }

      close $ifh;

      $du_by_yyyymmdd_abs->{$yyyymmdd} = $r;
   }

   return $du_by_yyyymmdd_abs;
}
