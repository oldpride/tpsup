#!/usr/bin/env perl

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use Carp;
use TPSUP::UTIL    qw(get_in_fh);
# use Carp::Always;

my $prog = $0; $prog =~ s:.*/::;

my $timeout = 3;

sub usage {
   my ($message) = @_;
   print "$message\n" if $message;

   print << "END";
usage:

   $prog    host1 host2 ...
   $prog -f hostlist.txt
 
   -t timeout          default is $timeout (seconds).

   -x  ExcludePattern  perl regex pattern, exclude hosts matches this pattern, case insensitive

   -m  MatchPattern    perl regex pattern, only    hosts matches this pattern, case insensitive


description:

   ping a list of hosts

examples:

   $prog linux1 tianpc1

   $prog -f - <<EOF
linux1
tianpc1
EOF

END

   exit 1;
}

my $verbose;
my $file_switch;
my $MatchPattern;
my $ExcludePattern;

GetOptions(
   'v|verbose'     => \$verbose,
   'file_switch'   => \$file_switch,
   'timeout=s'     => \$timeout,
   'm=s'           => \$MatchPattern,
   'x=s'           => \$ExcludePattern,
) || usage("cannot parse command line: $!");

usage("wrong number of args") if ! @ARGV;

my @hosts;
if ($file_switch) {
   for my $file (@ARGV) {
      
      my $ifh = get_in_fh($file);
      
      while (my $line = <$ifh>) {
         chomp $line;
      
         #$line =~ s/^\s+//;     # trim spaces
         #$line =~ s/\s+$//;     # trim spaces
         $line =~ s/^[^0-9a-zA-Z.#_-]+//;     # trim spaces or bad chars at front
         $line =~ s/[^0-9a-zA-Z.#_-]+$//;     # trim spaces or bad chars at end
      
         next if $line =~ /^\s*$/;     # skip blank lines
         next if $line =~ /^\s*#/;     # skip comment

         next if $line eq '';
      
         next if defined   $MatchPattern && $line !~   /$MatchPattern/i; 
         next if defined $ExcludePattern && $line =~ /$ExcludePattern/i;
      
         my @a = split /\s+/, $line;
         my $host = shift @a;

         push @hosts, $host;
      }
   }
} else {
   for my $string (@ARGV) {
      my @a = split /[,\s]+/, $string;
      push @hosts, @a;
   }
}

my $error = 0;

for my $host (@hosts) {
   my $cmd = "ping -c 1 -w $timeout -q $host";
   $verbose && print STDERR "$cmd\n";
   my @lines = `$cmd 2>&1`;
   chomp @lines;

   $verbose && print STDERR @lines;

   # $ ping -c 1 linux1
   # PING linux1.fios-router.home (192.168.1.191) 56(84) bytes of data.
   # 64 bytes from linux1.fios-router.home (192.168.1.191): icmp_seq=1 ttl=64 time=0.082 ms
   # 
   # --- linux1.fios-router.home ping statistics ---
   # 1 packets transmitted, 1 received, 0% packet loss, time 0ms
   # rtt min/avg/max/mdev = 0.082/0.082/0.082/0.000 ms

   my ($line) = grep {/^rtt/} @lines;
   if ($line) {
      my @a = split /\//, $line;
      my $rtt = $a[5];
      print "OK:    $host $rtt ms\n";
   } else {
      print "ERROR: failed to reach $host.\n";
      $error ++;
   }
}

print "Total $error ERROR(S)\n";
exit $error;
