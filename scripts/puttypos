#!/bin/bash


prog=`basename $0`
posdir=$HOME/.tpsup
posfile=$posdir/puttypos.cache

min=0
max=9

usage () {
   cat >&2 <<EOF
usage:

   $prog pos

   position the current putty's window at position.

   pos can be
      - min..max - default min=$min, max=$max
      - next     - position in $posfile + 1
      - last     - report last position. report-only, no movement.
      - reset    - this set the cache pos to max, so that the next one restart from 0.
                   ths doesn't move the current putty's position.

   if $posfile has no cached position, then next will be min.

   -n min    set the min, default $min
   -x max    set the max, default $max

examples:

   $prog 10

   $prog next

   $prog -n 10 -x 12 next
   $prog -n 10 -x 12 next
   $prog -n 10 -x 12 next
   $prog -n 10 -x 12 next

EOF
   exit 1
}


verbose=N
while getopts vn:x: o;
do
   case "$o" in
      v)  verbose=Y;;
      n)  min=$OPTARG;;
      x)  max=$OPTARG;;
      *)   usage;;
   esac
done

shift $((OPTIND-1))

if [ $# -ne 1 ]; then
   echo "wrong number of args" >&2
   usage
fi

pos=$1

[ -d $posdir ] || mkdir -p $posdir

if [ $pos = reset ]; then
   # reset doesn't change current putty's position.
   echo $max  >$posfile
   exit 0;
elif [ $pos = last ]; then
   # reporting last position doesn't change current putty's position.
   cat $posfile
   exit 0;
elif [ $pos = next ]; then
   touch $posfile
   cachepos=`cat $posfile`;

   if [[ $cachepos =~ ^[0-9]+$ ]]; then
      if [ $cachepos -lt $min  -o $cachepos -ge $max ]; then
         # if cache pos is at max, the next one will be $min
         pos=$min
      else
         pos=`expr $cachepos + 1`
      fi
   else
      # if cache file is corrupted, reset to min
      pos=$min
   fi
else 
   if ! [[ $pos =~ ^[0-9]+$ ]]; then  # bash regex
      echo "unsupported pos='$pos'" >&2
      usage
   fi
fi

offset=`expr 30 \* $pos`

# https://superuser.com/questions/1162451
printf '\033[3;'"$offset;$offset"'t'

echo $pos >$posfile
