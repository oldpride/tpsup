#!/bin/bash

check_only=N

usage() {
   cat <<EOF
usage:

   $prog 
   $prog -n

   -n     check only 

   check for my team's repos, and do git pull if needed.
   no push is done.

EOF

   exit 1
}

while getopts n o; do
   case "$o" in
   #d) depot_dir="$OPTARG";;
   n) check_only=Y ;;
   *)
      echo "unknow switch '$o'"
      usage
      ;;
   esac
done

shift $((OPTIND - 1))

if [ $# -ne 0 ]; then
   echo "wrong number of args"
   usage
fi

. $TPSUP/profile

# file format:
#     url,branch
#     https://github.com/emilyh1011/DataStructures,
#     https://github.com/weip2008/LearnTorch.git,master

# use "cat |while read" to read line by line, which not split at space.
# however, "cat | while read" mess up stdin. so we have to use
# for loop.
# cat "$SITESPEC/cfg/repos_team.txt" | while read line; do
for line in $(cat "$SITESPEC/cfg/repos_team.txt"); do
   # skip the first line
   if echo $line | egrep '^url' >/dev/null; then
      continue
   fi

   # filter out comments
   if echo $line | egrep '^[ ]*#' >/dev/null; then
      continue
   fi

   # filter out empty lines
   if echo $line | egrep '^[ ]*$' >/dev/null; then
      continue
   fi

   echo ""
   echo "------ $line -------"
   echo ""

   url=$(echo $line | cut -d, -f1)
   branch=$(echo $line | cut -d, -f2)

   # $ basename https://github.com/buffetenjoyer/java.git .git
   # javas
   repo=$(basename $url .git)

   # get the owner of the repo
   owner=$(echo $url | awk -F/ '{print $4}')

   if ! cd $HOME/team/$owner 2>/dev/null; then
      (set -x; mkdir -p $HOME/team/$owner) || exit 1
   fi

   if ! cd $HOME/team/$owner/$repo 2>/dev/null; then
      cd $HOME/team/$owner

      # if branch is not specified, then clone the repo.
      if [ -z "$branch" ]; then
         (
            set -x
            git clone $url
         )
      else 
         (
            set -x
            git clone -b $branch $url
         )
      fi

      continue
   fi

   # pwd is $HOME/team/$owner/$repo
   fetch=$(git fetch --dry-run 2>&1)
   need_pull=N
   if [ -n "$fetch" ]; then
      need_pull=Y
      (
         set -x
         git fetch --dry-run
      )
   fi

   # $ git status --show-stash
   # On branch master
   # Your branch and 'origin/master' have diverged,
   # and have 3 and 3 different commits each, respectively.
   #   (use "git pull" to merge the remote branch into yours)
   #
   # nothing to commit, working tree clean

   if git status | grep 'use "git pull"' >/dev/null; then
      need_pull=Y
      (
         set -x
         git status
      )
   fi

   if [ $need_pull = Y ]; then
      if [ $check_only = N ]; then
         echo ""
         echo "git pull? Y|N ? [N]"
         read answer

         if [ "X$answer" != "XY" -a "X$answer" != "Xy" ]; then
            echo "Answer is "$answer". Not done"
         else
            (
               set -x
               gitpull
            ) # gitpull is a wrapper for "git pull"
         fi
      fi
   fi
done
